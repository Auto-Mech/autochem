""" Level 3 InChI functions (depend on extern and L1-2)
"""

import operator
import functools
import itertools
import numpy
import autoparse.pattern as app
import autoparse.find as apf
from autoparse import cast as ap_cast
from phydat import phycon
import automol.formula
from automol.util import dict_
from automol.extern import rdkit_


MAIN_PFXS = ('c', 'h')
CHAR_PFXS = ('q', 'p')
STE_PFXS = ('b', 't', 'm', 's')
ISO_NONSTE_PFXS = ('i', 'h')
ISO_PFXS = ISO_NONSTE_PFXS + STE_PFXS
NONSLASH = '[^/]'
NONSLASHES = app.one_or_more(NONSLASH)
SLASH = app.escape('/')
SLASH_OR_START = app.one_of_these([SLASH, app.STRING_START])
SLASH_OR_END = app.one_of_these([SLASH, app.STRING_END])

HARDCODED_INCHI_DCT = {
    'InChI=1S/C': {
        'inchi': 'InChI=1S/C',
        'geom': (('C', (0., 0., 0.)),),
        'graph': ({0: ('C', 0, None)}, {}),
        'smiles': '[C]',
        'formula': {'C': 1},
    },
    'InChI=1S/B': {
        'inchi': 'InChI=1S/B',
        'geom': (('B', (0., 0., 0.)),),
        'graph': ({0: ('B', 0, None)}, {}),
        'smiles': '[B]',
        'formula': {'B': 1},
    },
    'InChI=1S/N': {
        'inchi': 'InChI=1S/N',
        'geom': (('N', (0., 0., 0.)),),
        'graph': ({0: ('N', 0, None)}, {}),
        'smiles': '[N]',
        'formula': {'N': 1},
    },
    'InChI=1S/CH/h1H': {
        'inchi': 'InChI=1S/CH/h1H',
        'geom': (('C', (0., 0., 0.)),
                 ('H', (0., 0., 1.12 * phycon.ANG2BOHR))),
        'graph': ({0: ('C', 1, None)}, {}),
        'smiles': '[CH]',
        'formula': {'C': 1, 'H': 1},
    },
    'InChI=1S/CF/c1-2': {
        'inchi': 'InChI=1S/CF/c1-2',
        'geom': (('C', (0., 0., 0.)),
                 ('F', (0., 0., 1.27 * phycon.ANG2BOHR))),
        'graph': ({0: ('C', 0, None), 1: ('F', 0, None)},
                  {frozenset({0, 1}): (1, None)}),
        'smiles': '[C]F',
        'formula': {'C': 1, 'F': 1},
    },
    'InChI=1S/CCl/c1-2': {
        'inchi': 'InChI=1S/CCl/c1-2',
        'geom': (('C', (0., 0., 0.)),
                 ('Cl', (0., 0., 1.65 * phycon.ANG2BOHR))),
        'graph': ({0: ('C', 0, None), 1: ('Cl', 0, None)},
                  {frozenset({0, 1}): (1, None)}),
        'smiles': '[C]Cl',
        'formula': {'C': 1, 'Cl': 1},
    },
    'InChI=1S/CBr/c1-2': {
        'inchi': 'InChI=1S/CBr/c1-2',
        'geom': (('C', (0., 0., 0.)),
                 ('Br', (0., 0., 1.8 * phycon.ANG2BOHR))),
        'graph': ({0: ('C', 0, None), 1: ('Br', 0, None)},
                  {frozenset({0, 1}): (1, None)}),
        'smiles': '[C]Br',
        'formula': {'C': 1, 'Br': 1},
    },
    'InChI=1S/CI/c1-2': {
        'inchi': 'InChI=1S/CI/c1-2',
        'geom': (('C', (0., 0., 0.)),
                 ('I', (0., 0., 1.8 * phycon.ANG2BOHR))),
        'graph': ({0: ('C', 0, None), 1: ('I', 0, None)},
                  {frozenset({0, 1}): (1, None)}),
        'smiles': '[C]I',
        'formula': {'C': 1, 'I': 1},
    },
    'InChI=1S/C7H13/c1-6(2)5-7(3)4/h5,7H,1H2,2-4H3/b6-5+': {
        'inchi': 'InChI=1S/C7H13/c1-6(2)5-7(3)4/h5,7H,1H2,2-4H3/b6-5+',
        'geom': (('C', (2.9504879811871962, 2.292895414872005, -1.3368243864930003)), ('C', (2.5673838037731307, -0.008139050422346866, -0.17152288150330522)), ('H', (1.3969346848176885, 3.447419811768214, -2.0135183044843195)), ('H', (4.841962103311073, 3.0346431547322097, -1.6187582963284302)), ('C', (4.829134642371465, -1.49268143841626, 0.7751467594015465)), ('C', (0.16754878746146742, -1.0464660775902797, 0.22737940631958772)), ('H', (6.602497102201977, -0.7242545451168418, 0.04279095838486706)), ('H', (4.710550548546736, -3.478611631195021, 0.2053414202444985)), ('H', (4.926744665929738, -1.4471654949584831, 2.8436504249583128)), ('C', (-2.309165956812197, 0.1601694069415546, -0.45936407520691613)), ('H', (0.059305274995243025, -2.84879803892406, 1.2211693681627305)), ('C', (-4.338569299107115, -1.849291655551407, -0.9380128055241295)), ('C', (-3.1609089852569254, 2.0152228374494827, 1.6138601262112435)), ('H', (-2.064962318797658, 1.2437024624826896, -2.2124932374121506)), ('H', (-4.671871634210865, -2.974326876259847, 0.7713597482461291)), ('H', (-6.134982638215961, -0.9730483278901176, -1.4766508916940015)), ('H', (-3.7713018621365566, -3.142000385645594, -2.450961556635925)), ('H', (-1.7341147379308777, 3.4801498682611434, 1.9233556915864756)), ('H', (-4.944132036010076, 2.9327283350601436, 1.0936960026438471)), ('H', (-3.4520912147503457, 1.0193031542629487, 3.407049592550058))),
        'graph': ({0: ('C', 0, None), 1: ('C', 0, None), 2: ('H', 0, None), 3: ('H', 0, None), 4: ('C', 0, None), 5: ('C', 0, None), 6: ('H', 0, None), 7: ('H', 0, None), 8: ('H', 0, None), 9: ('C', 0, None), 10: ('H', 0, None), 11: ('C', 0, None), 12: ('C', 0, None), 13: ('H', 0, None), 14: ('H', 0, None), 15: ('H', 0, None), 16: ('H', 0, None), 17: ('H', 0, None), 18: ('H', 0, None), 19: ('H', 0, None)}, {frozenset({0, 1}): (1, None), frozenset({0, 2}): (1, None), frozenset({0, 3}): (1, None), frozenset({1, 4}): (1, None), frozenset({1, 5}): (1, False), frozenset({4, 6}): (1, None), frozenset({4, 7}): (1, None), frozenset({8, 4}): (1, None), frozenset({9, 5}): (1, None), frozenset({10, 5}): (1, None), frozenset({9, 11}): (1, None), frozenset({9, 12}): (1, None), frozenset({9, 13}): (1, None), frozenset({11, 14}): (1, None), frozenset({11, 15}): (1, None), frozenset({16, 11}): (1, None), frozenset({17, 12}): (1, None), frozenset({18, 12}): (1, None), frozenset({19, 12}): (1, None)}),
        'smiles': '[CH2]C(C)=CC(C)C',
        'formula': {'C': 7, 'H': 13},
    },
    'InChI=1S/C7H13/c1-5-6-7(2,3)4/h5-6H,1H2,2-4H3/b6-5+': {
        'inchi': 'InChI=1S/C7H13/c1-5-6-7(2,3)4/h5-6H,1H2,2-4H3/b6-5+',
        'geom': (('C', (5.753492286913037, -0.37920000323886965, 0.00022487740892948157)), ('C', (3.3144889171990086, 0.5684220596332129, 0.00027778974044230075)), ('H', (7.3841936523543605, 0.8619853440447102, -0.00043841646110621616)), ('H', (6.105984790820811, -2.402233078764869, 0.0007899055204413722)), ('C', (1.1576991367869782, -0.9122161541855046, 0.0014343021292224916)), ('H', (3.096112166141102, 2.6144833377240415, -0.00012094247202930099)), ('C', (-1.55486287657445, -0.03241447222997813, 0.0001285013765311323)), ('H', (1.4091309772313934, -2.9602427474468094, 0.0018746083164541657)), ('C', (-2.866181629552146, -1.1002420139424332, -2.372545481333927)), ('C', (-2.870580911972212, -1.1060415834214632, 2.3675906194329763)), ('C', (-1.7937960684250869, 2.8544974529184404, 0.0034619782618387413)), ('H', (-4.873624464543119, -0.5850554289894927, -2.389365933576627)), ('H', (-1.9909209594760948, -0.36018935841676386, -4.096007833095599)), ('H', (-2.7384531510063264, -3.166933432144885, -2.4268259745615777)), ('H', (-2.743417461537904, -3.172903076975206, 2.4168538897975367)), ('H', (-1.998343803696893, -0.3706093082725383, 4.094586759049254)), ('H', (-4.877917922300159, -0.5904487073515493, 2.3823096962241674)), ('H', (-0.9125204000917033, 3.6852210576697018, 1.6830165434984983)), ('H', (-0.9108857869931823, 3.6894011318592144, -1.6731370553146045)), ('H', (-3.7908794247963002, 3.400690664137893, 0.0030254515268579828))),
        'graph': ({0: ('C', 0, None), 1: ('C', 0, None), 2: ('H', 0, None), 3: ('H', 0, None), 4: ('C', 0, None), 5: ('H', 0, None), 6: ('C', 0, None), 7: ('H', 0, None), 8: ('C', 0, None), 9: ('C', 0, None), 10: ('C', 0, None), 11: ('H', 0, None), 12: ('H', 0, None), 13: ('H', 0, None), 14: ('H', 0, None), 15: ('H', 0, None), 16: ('H', 0, None), 17: ('H', 0, None), 18: ('H', 0, None), 19: ('H', 0, None)}, {frozenset({0, 1}): (1, None), frozenset({0, 2}): (1, None), frozenset({0, 3}): (1, None), frozenset({1, 4}): (1, False), frozenset({1, 5}): (1, None), frozenset({4, 6}): (1, None), frozenset({4, 7}): (1, None), frozenset({8, 6}): (1, None), frozenset({9, 6}): (1, None), frozenset({10, 6}): (1, None), frozenset({8, 11}): (1, None), frozenset({8, 12}): (1, None), frozenset({8, 13}): (1, None), frozenset({9, 14}): (1, None), frozenset({9, 15}): (1, None), frozenset({16, 9}): (1, None), frozenset({17, 10}): (1, None), frozenset({10, 18}): (1, None), frozenset({10, 19}): (1, None)}),
        'smiles': '[CH2]C=CC(C)(C)C',
        'formula': {'C': 7, 'H': 13},
    },
    'InChI=1S/C8H15/c1-7(2)6-8(3,4)5/h6H,1H2,2-5H3/b7-6-': {
        'inchi': 'InChI=1S/C8H15/c1-7(2)6-8(3,4)5/h6H,1H2,2-5H3/b7-6-',
        'geom': (('C', (-5.013415064947736, -2.0050050882891317, -0.03441380247071251)), ('C', (-2.956257315048219, -0.38735417147022017, -0.028551872029542322)), ('H', (-6.938091675095906, -1.2975539878798614, 0.018453175615095692)), ('H', (-4.765566145237189, -4.041653640549056, -0.09874385923354789)), ('C', (-3.4718445219397567, 2.429972368560465, 0.011336467026621512)), ('C', (-0.5176923617952974, -1.408040605257004, -0.0855025482724649)), ('H', (-5.442137231030354, 2.7997917713125617, 0.5130946581320586)), ('H', (-3.1290104082591976, 3.2783384564190006, -1.8447449744935553)), ('H', (-2.281311393722948, 3.4232917885983687, 1.37801663657573)), ('C', (2.042058838157109, -0.12047948912856385, -0.0067198661021280375)), ('H', (-0.43926494813654665, -3.4667384819487697, -0.08574821266877442)), ('C', (4.051410296534795, -2.1075000538817137, -0.6961694354402874)), ('C', (2.276604085944433, 2.082793774517478, -1.8945146914597384)), ('C', (2.590754046766668, 0.8422055806895431, 2.691075827314973)), ('H', (5.9521119513292815, -1.290420271756258, -0.6051583355121131)), ('H', (3.9868043397576423, -3.7156248613021927, 0.6081951253957237)), ('H', (3.7522590919703185, -2.827077526838047, -2.615186315842712)), ('H', (4.24332710238404, 2.7304048074380014, -1.974402863413468)), ('H', (1.116969869604986, 3.704794840877194, -1.3594500773931069)), ('H', (1.7191764529091338, 1.4888774197257137, -3.7976389751470627)), ('H', (4.4749376054985275, 1.7028359911022999, 2.7808945100579834)), ('H', (2.5270872838738683, -0.7134812164756067, 4.054832590547998)), ('H', (1.2129887437656235, 2.2646515682009123, 3.288346445979425))),
        'graph': ({0: ('C', 0, None), 1: ('C', 0, None), 2: ('H', 0, None), 3: ('H', 0, None), 4: ('C', 0, None), 5: ('C', 0, None), 6: ('H', 0, None), 7: ('H', 0, None), 8: ('H', 0, None), 9: ('C', 0, None), 10: ('H', 0, None), 11: ('C', 0, None), 12: ('C', 0, None), 13: ('C', 0, None), 14: ('H', 0, None), 15: ('H', 0, None), 16: ('H', 0, None), 17: ('H', 0, None), 18: ('H', 0, None), 19: ('H', 0, None), 20: ('H', 0, None), 21: ('H', 0, None), 22: ('H', 0, None)}, {frozenset({0, 1}): (1, None), frozenset({0, 2}): (1, None), frozenset({0, 3}): (1, None), frozenset({1, 4}): (1, None), frozenset({1, 5}): (1, True), frozenset({4, 6}): (1, None), frozenset({4, 7}): (1, None), frozenset({8, 4}): (1, None), frozenset({9, 5}): (1, None), frozenset({10, 5}): (1, None), frozenset({9, 11}): (1, None), frozenset({9, 12}): (1, None), frozenset({9, 13}): (1, None), frozenset({11, 14}): (1, None), frozenset({11, 15}): (1, None), frozenset({16, 11}): (1, None), frozenset({17, 12}): (1, None), frozenset({18, 12}): (1, None), frozenset({19, 12}): (1, None), frozenset({20, 13}): (1, None), frozenset({21, 13}): (1, None), frozenset({13, 22}): (1, None)}),
        'smiles': '[CH2]C(C)=CC(C)(C)C',
        'formula': {'C': 8, 'H': 15},
    },
    'InChI=1S/C8H15/c1-3-5-7-8-6-4-2/h3,5H,1,4,6-8H2,2H3/b5-3+': {'inchi': 'InChI=1S/C8H15/c1-3-5-7-8-6-4-2/h3,5H,1,4,6-8H2,2H3/b5-3+', 'geom': (('C', (5.5981397918652736, -2.7646164092132897, 0.5683634781233237)), ('C', (3.8962411049212013, -1.2068168982398781, -0.6575150875440476)), ('H', (6.4525378855162705, -2.206555717925962, 2.3502637205886536)), ('H', (6.135713962226513, -4.583972913211319, -0.20637887988737488)), ('C', (3.112193735468748, 1.1392346228151298, 0.20489166542663956)), ('H', (3.1053264707288344, -1.8664768249363206, -2.4438939809267124)), ('C', (1.2267346116022035, 2.785684965786019, -1.1077083218641168)), ('H', (3.868016155511363, 1.8270665865898974, 1.9952427631250167)), ('C', (-1.1588726567108878, 3.2733646972567954, 0.4912456446695152)), ('H', (2.0896345830916356, 4.623974635835011, -1.549254169434091)), ('H', (0.7009882370602051, 1.938687039642315, -2.924659204504439)), ('C', (-2.5590708985472417, 0.8754061789877117, 1.3064016855992548)), ('H', (-0.619072388973859, 4.3449376761499074, 2.183894122229472)), ('H', (-2.4421308664516603, 4.493305743437978, -0.5910931039603304)), ('C', (-3.507539558723529, -0.7539194658342787, -0.8844938719250384)), ('H', (-1.3150566312538516, -0.2722452839902075, 2.508150338370655)), ('H', (-4.175164681038776, 1.4208831840056155, 2.489262525746704)), ('C', (-5.07872777929581, -3.0037725887467306, 0.011716301977838534)), ('H', (-1.8935169160654965, -1.4515005266902834, -1.9830426912590609)), ('H', (-4.63462135282584, 0.4172685360362176, -2.1767509574752415)), ('H', (-6.7504267530289415, -2.3735923896074307, 1.0603347776250145)), ('H', (-5.725662290263418, -4.158204389062792, -1.5789738922091665)), ('H', (-3.971144179355973, -4.220969752593748, 1.2694802165600598))), 'formula': {'C': 8, 'H': 15}, 'smiles': '[CH2]/C=C/CCCCC', 'graph': ({0: ('C', 0, None), 1: ('C', 0, None), 2: ('H', 0, None), 3: ('H', 0, None), 4: ('C', 0, None), 5: ('H', 0, None), 6: ('C', 0, None), 7: ('H', 0, None), 8: ('C', 0, None), 9: ('H', 0, None), 10: ('H', 0, None), 11: ('C', 0, None), 12: ('H', 0, None), 13: ('H', 0, None), 14: ('C', 0, None), 15: ('H', 0, None), 16: ('H', 0, None), 17: ('C', 0, None), 18: ('H', 0, None), 19: ('H', 0, None), 20: ('H', 0, None), 21: ('H', 0, None), 22: ('H', 0, None)}, {frozenset({0, 1}): (1, None), frozenset({0, 2}): (1, None), frozenset({0, 3}): (1, None), frozenset({1, 4}): (1, False), frozenset({1, 5}): (1, None), frozenset({4, 6}): (1, None), frozenset({4, 7}): (1, None), frozenset({8, 6}): (1, None), frozenset({9, 6}): (1, None), frozenset({10, 6}): (1, None), frozenset({8, 11}): (1, None), frozenset({8, 12}): (1, None), frozenset({8, 13}): (1, None), frozenset({11, 14}): (1, None), frozenset({11, 15}): (1, None), frozenset({16, 11}): (1, None), frozenset({17, 14}): (1, None), frozenset({18, 14}): (1, None), frozenset({19, 14}): (1, None), frozenset({17, 20}): (1, None), frozenset({17, 21}): (1, None), frozenset({17, 22}): (1, None)}),
    },
    'InChI=1S/C12H23/c1-3-5-7-9-11-12-10-8-6-4-2/h3,5H,1,4,6-12H2,2H3/b5-3+': {'inchi': 'InChI=1S/C12H23/c1-3-5-7-9-11-12-10-8-6-4-2/h3,5H,1,4,6-12H2,2H3/b5-3+', 'geom': (('C', (4.565226830046778, 4.836064268073519, -0.872295689785208)), ('C', (4.97686020277688, 2.264543853811761, -1.0506253647924124)), ('H', (4.918605615507391, 6.091641769528586, -2.4529136437235226)), ('H', (3.8775592724449246, 5.679515178279739, 0.8691115012638115)), ('C', (4.581183677450143, 0.5369770169055946, 0.8842217513629723)), ('H', (5.671823992949125, 1.5243154537564243, -2.8459313243917403)), ('C', (4.931856375099102, -2.2588614473525093, 0.5776458128515725)), ('H', (3.8745168133829377, 1.2389384629204105, 2.685215786599928)), ('C', (2.5043935628332448, -3.604548649373907, -0.31168764768076324)), ('H', (6.43431147703623, -2.621696422344914, -0.8050516753369166)), ('H', (5.550598062001006, -3.094617392775865, 2.372844058061749)), ('C', (0.3330283248155585, -3.3998875305345733, 1.5828912944672406)), ('H', (1.9443467693880614, -2.776013347475926, -2.1274272158746665)), ('H', (2.9214088755686514, -5.605110991542087, -0.6751008788675582)), ('C', (-2.184196478409545, -4.465655270770279, 0.6277103270933269)), ('H', (0.8672935847311212, -4.384191067227918, 3.330476000220382)), ('H', (0.07231225991676925, -1.4096695491771487, 2.1054723777490976)), ('C', (-3.1943306815117727, -3.205988401979722, -1.7882780681387502)), ('H', (-1.9847245475107185, -6.5016877723133035, 0.27868925007801865)), ('H', (-3.5903190116492096, -4.281064933109433, 2.1402830227061562)), ('C', (-3.2109678303203033, -0.30945399140047214, -1.7335478200932404)), ('H', (-5.120341438304516, -3.897571472113523, -2.133553707973401)), ('H', (-2.0675531333156605, -3.82856434319018, -3.413869614136836)), ('C', (-4.814859651219757, 0.8222292858173283, 0.38940641404246734)), ('H', (-1.2612429003791892, 0.38192876776403073, -1.584284022621703)), ('H', (-3.9237706351168704, 0.3897994770765626, -3.5534221090496456)), ('C', (-4.792071443872861, 3.7168815291756223, 0.4546983414031608)), ('H', (-4.15353298608066, 0.11757498007373515, 2.227269005987105)), ('H', (-6.769142600575475, 0.15215885789573885, 0.183273198551402)), ('C', (-2.2049683479805777, 4.837757462681929, 1.092664212179347)), ('H', (-5.431891135978121, 4.451641061823884, -1.378281198233294)), ('H', (-6.175549388951164, 4.3656320669497966, 1.8561815970048263)), ('H', (-1.5003650648423716, 4.081730952217765, 2.8906403547939465)), ('H', (-0.7931709671861633, 4.407697370502488, -0.357180914425035)), ('H', (-2.3081133793603166, 6.8972509140725125, 1.2707538919686183))), 'formula': {'C': 12, 'H': 23}, 'smiles': '[CH2]/C=C/CCCCCCCCC', 'graph': ({0: ('C', 0, None), 1: ('C', 0, None), 2: ('H', 0, None), 3: ('H', 0, None), 4: ('C', 0, None), 5: ('H', 0, None), 6: ('C', 0, None), 7: ('H', 0, None), 8: ('C', 0, None), 9: ('H', 0, None), 10: ('H', 0, None), 11: ('C', 0, None), 12: ('H', 0, None), 13: ('H', 0, None), 14: ('C', 0, None), 15: ('H', 0, None), 16: ('H', 0, None), 17: ('C', 0, None), 18: ('H', 0, None), 19: ('H', 0, None), 20: ('C', 0, None), 21: ('H', 0, None), 22: ('H', 0, None), 23: ('C', 0, None), 24: ('H', 0, None), 25: ('H', 0, None), 26: ('C', 0, None), 27: ('H', 0, None), 28: ('H', 0, None), 29: ('C', 0, None), 30: ('H', 0, None), 31: ('H', 0, None), 32: ('H', 0, None), 33: ('H', 0, None), 34: ('H', 0, None)}, {frozenset({0, 1}): (1, None), frozenset({0, 2}): (1, None), frozenset({0, 3}): (1, None), frozenset({1, 4}): (1, False), frozenset({1, 5}): (1, None), frozenset({4, 6}): (1, None), frozenset({4, 7}): (1, None), frozenset({8, 6}): (1, None), frozenset({9, 6}): (1, None), frozenset({10, 6}): (1, None), frozenset({8, 11}): (1, None), frozenset({8, 12}): (1, None), frozenset({8, 13}): (1, None), frozenset({11, 14}): (1, None), frozenset({11, 15}): (1, None), frozenset({16, 11}): (1, None), frozenset({17, 14}): (1, None), frozenset({18, 14}): (1, None), frozenset({19, 14}): (1, None), frozenset({17, 20}): (1, None), frozenset({17, 21}): (1, None), frozenset({17, 22}): (1, None), frozenset({20, 23}): (1, None), frozenset({24, 20}): (1, None), frozenset({25, 20}): (1, None), frozenset({26, 23}): (1, None), frozenset({27, 23}): (1, None), frozenset({28, 23}): (1, None), frozenset({26, 29}): (1, None), frozenset({26, 30}): (1, None), frozenset({26, 31}): (1, None), frozenset({32, 29}): (1, None), frozenset({33, 29}): (1, None), frozenset({34, 29}): (1, None)}),
    },
    'InChI=1S/C11H21/c1-3-5-7-9-11-10-8-6-4-2/h3,5H,1,4,6-11H2,2H3/b5-3-': {'inchi': 'InChI=1S/C11H21/c1-3-5-7-9-11-10-8-6-4-2/h3,5H,1,4,6-11H2,2H3/b5-3-', 'geom': (('C', (-1.9334657263576753, 4.842776575271145, -0.35594314381286013)), ('C', (-4.253242495364318, 3.738071028220381, -0.835398787185644)), ('H', (-0.5758127785098784, 4.03073480299616, 0.9502790178044763)), ('H', (-1.3949618107427104, 6.5911965399717385, -1.2797622164086757)), ('C', (-5.189930602874501, 1.5107717866152681, 0.195618779329018)), ('H', (-5.48723743474053, 4.714762748080381, -2.1630693403269268)), ('C', (-3.8551055466222346, -0.18518371166423986, 2.0228497720918304)), ('H', (-7.068516792822756, 0.9036727023723098, -0.3873466125657183)), ('C', (-3.6999571419960215, -2.942333812955846, 1.1061379594538614)), ('H', (-1.9518811074502616, 0.5228569832961737, 2.4218881201957565)), ('H', (-4.866989636116636, -0.16473687498678619, 3.8386195759037407)), ('C', (-2.412335554631567, -3.2738994897503, -1.4708777783807279)), ('H', (-2.7077432117415112, -4.056045794720543, 2.54573321155376)), ('H', (-5.617598301779113, -3.7263585056947934, 0.9931247782469815)), ('C', (0.18992125506076263, -2.0269221318921917, -1.706296079638013)), ('H', (-2.2462890994398386, -5.30471256773481, -1.8663539927381656)), ('H', (-3.6443236048625436, -2.4878773564967434, -2.942479321867506)), ('C', (2.125443003442936, -2.9292606876199283, 0.2425520173808886)), ('H', (0.9346623211036927, -2.399613918354985, -3.6079048029727203)), ('H', (-0.039982825362436726, 0.02773740006947, -1.582698542402444)), ('C', (4.736621210173552, -1.7170051575909826, -0.05892355031790054)), ('H', (2.3072818998651154, -4.993079722111685, 0.10694527061803487)), ('H', (1.4342284299035988, -2.5374581008503805, 2.1614630731202875)), ('C', (4.774205973082783, 1.1353247794615577, 0.4249842878064619)), ('H', (5.4599705764763, -2.094723615547493, -1.9697182323484579)), ('H', (6.060924271359268, -2.630383493343644, 1.2531000705045914)), ('C', (7.436372770130502, 2.2471810501710547, 0.322587587972404)), ('H', (3.577143841102518, 2.104058862607255, -0.9625320020019447)), ('H', (3.93330241369368, 1.5160101074350372, 2.286621524135485)), ('H', (8.661540798774702, 1.3767542995239241, 1.7482668968844315)), ('H', (7.418322106180128, 4.288136288270897, 0.6627439597331894)), ('H', (8.302776293856533, 1.921962963432013, -1.5306857205253426))), 'formula': {'C': 11, 'H': 21}, 'smiles': '[CH2]/C=C\\CCCCCCCC', 'graph': ({0: ('C', 0, None), 1: ('C', 0, None), 2: ('H', 0, None), 3: ('H', 0, None), 4: ('C', 0, None), 5: ('H', 0, None), 6: ('C', 0, None), 7: ('H', 0, None), 8: ('C', 0, None), 9: ('H', 0, None), 10: ('H', 0, None), 11: ('C', 0, None), 12: ('H', 0, None), 13: ('H', 0, None), 14: ('C', 0, None), 15: ('H', 0, None), 16: ('H', 0, None), 17: ('C', 0, None), 18: ('H', 0, None), 19: ('H', 0, None), 20: ('C', 0, None), 21: ('H', 0, None), 22: ('H', 0, None), 23: ('C', 0, None), 24: ('H', 0, None), 25: ('H', 0, None), 26: ('C', 0, None), 27: ('H', 0, None), 28: ('H', 0, None), 29: ('H', 0, None), 30: ('H', 0, None), 31: ('H', 0, None)}, {frozenset({0, 1}): (1, None), frozenset({0, 2}): (1, None), frozenset({0, 3}): (1, None), frozenset({1, 4}): (1, True), frozenset({1, 5}): (1, None), frozenset({4, 6}): (1, None), frozenset({4, 7}): (1, None), frozenset({8, 6}): (1, None), frozenset({9, 6}): (1, None), frozenset({10, 6}): (1, None), frozenset({8, 11}): (1, None), frozenset({8, 12}): (1, None), frozenset({8, 13}): (1, None), frozenset({11, 14}): (1, None), frozenset({11, 15}): (1, None), frozenset({16, 11}): (1, None), frozenset({17, 14}): (1, None), frozenset({18, 14}): (1, None), frozenset({19, 14}): (1, None), frozenset({17, 20}): (1, None), frozenset({17, 21}): (1, None), frozenset({17, 22}): (1, None), frozenset({20, 23}): (1, None), frozenset({24, 20}): (1, None), frozenset({25, 20}): (1, None), frozenset({26, 23}): (1, None), frozenset({27, 23}): (1, None), frozenset({28, 23}): (1, None), frozenset({26, 29}): (1, None), frozenset({26, 30}): (1, None), frozenset({26, 31}): (1, None)}),
    },
    'InChI=1S/C10H19/c1-3-5-7-9-10-8-6-4-2/h3,5H,1,4,6-10H2,2H3/b5-3-': {'inchi': 'InChI=1S/C10H19/c1-3-5-7-9-10-8-6-4-2/h3,5H,1,4,6-10H2,2H3/b5-3-', 'geom': (('C', (-8.293405142000386, 1.7788351066898374, 1.2733088016902374)), ('C', (-8.144710152092612, -0.614589958604273, 0.24462693666664134)), ('H', (-6.62812367818931, 2.7931456045293266, 1.9130169999540958)), ('H', (-10.096836923939184, 2.7300136341300316, 1.4814942597535499)), ('C', (-5.946609068851948, -2.0145047415218085, -0.11019182010157141)), ('H', (-9.907715023029489, -1.4924867966253381, -0.3545182903142649)), ('C', (-3.3404915486853084, -1.1060699293133451, 0.524055069659714)), ('H', (-6.11064485544619, -3.8559578131048164, -1.00791566463094)), ('C', (-2.1762445108736186, 0.5037613007984224, -1.6067623148840238)), ('H', (-2.1232717081247845, -2.738209376336142, 0.9032002708409453)), ('H', (-3.371063537942965, 0.02202286826608553, 2.2666679059767754)), ('C', (0.41239493235866187, 1.6190852189481344, -0.9526997569711877)), ('H', (-3.492782687409829, 2.040777603844049, -2.053128853800041)), ('H', (-2.021483500103124, -0.650664830339263, -3.3247898143088794)), ('C', (2.4882647503524624, -0.3444403808871983, -0.5136521273390687)), ('H', (0.23655213693256003, 2.8170033968632318, 0.7360426566874476)), ('H', (0.9992418217150886, 2.8781813904488036, -2.4949411527537046)), ('C', (5.0882803448599985, 0.8400871977029047, -0.08711259493135497)), ('H', (2.013036424322328, -1.5255966880694847, 1.1251826193462255)), ('H', (2.5751978213018987, -1.6254932802395619, -2.147840037481862)), ('C', (7.171227187193638, -1.1076572992587295, 0.37686808120005466)), ('H', (4.993425541992643, 2.1401412932467467, 1.5309824075270395)), ('H', (5.592372347730377, 2.003971408098507, -1.7327276789547916)), ('C', (9.76188863738016, 0.09517794603480897, 0.7955860371744984)), ('H', (6.668446654254329, -2.2655737545501355, 2.024248169424669)), ('H', (7.261476727493254, -2.4074147078008745, -1.2386663423583444)), ('H', (10.333239772507833, 1.2176601467477552, -0.848970800218682)), ('H', (9.736827089504338, 1.358149945818792, 2.437306395653367)), ('H', (11.218542447214565, -1.3377616906512275, 1.1212198636611403))), 'formula': {'C': 10, 'H': 19}, 'smiles': '[CH2]/C=C\\CCCCCCC', 'graph': ({0: ('C', 0, None), 1: ('C', 0, None), 2: ('H', 0, None), 3: ('H', 0, None), 4: ('C', 0, None), 5: ('H', 0, None), 6: ('C', 0, None), 7: ('H', 0, None), 8: ('C', 0, None), 9: ('H', 0, None), 10: ('H', 0, None), 11: ('C', 0, None), 12: ('H', 0, None), 13: ('H', 0, None), 14: ('C', 0, None), 15: ('H', 0, None), 16: ('H', 0, None), 17: ('C', 0, None), 18: ('H', 0, None), 19: ('H', 0, None), 20: ('C', 0, None), 21: ('H', 0, None), 22: ('H', 0, None), 23: ('C', 0, None), 24: ('H', 0, None), 25: ('H', 0, None), 26: ('H', 0, None), 27: ('H', 0, None), 28: ('H', 0, None)}, {frozenset({0, 1}): (1, None), frozenset({0, 2}): (1, None), frozenset({0, 3}): (1, None), frozenset({1, 4}): (1, True), frozenset({1, 5}): (1, None), frozenset({4, 6}): (1, None), frozenset({4, 7}): (1, None), frozenset({8, 6}): (1, None), frozenset({9, 6}): (1, None), frozenset({10, 6}): (1, None), frozenset({8, 11}): (1, None), frozenset({8, 12}): (1, None), frozenset({8, 13}): (1, None), frozenset({11, 14}): (1, None), frozenset({11, 15}): (1, None), frozenset({16, 11}): (1, None), frozenset({17, 14}): (1, None), frozenset({18, 14}): (1, None), frozenset({19, 14}): (1, None), frozenset({17, 20}): (1, None), frozenset({17, 21}): (1, None), frozenset({17, 22}): (1, None), frozenset({20, 23}): (1, None), frozenset({24, 20}): (1, None), frozenset({25, 20}): (1, None), frozenset({26, 23}): (1, None), frozenset({27, 23}): (1, None), frozenset({28, 23}): (1, None)}),
    },
    'InChI=1S/C9H17/c1-3-5-7-9-8-6-4-2/h3,5H,1,4,6-9H2,2H3/b5-3+': {'inchi': 'InChI=1S/C9H17/c1-3-5-7-9-8-6-4-2/h3,5H,1,4,6-9H2,2H3/b5-3+', 'geom': (('C', (6.581787593593084, -2.702527567635247, 0.6906060817269396)), ('C', (4.503691678223494, -1.6912973233802544, -0.5277324766998549)), ('H', (6.943925259645195, -4.719447379145391, 0.6961732148925384)), ('H', (7.918795283520254, -1.499590277130934, 1.6815312187638882)), ('C', (3.909079904217561, 0.858001801372245, -0.6243787399341446)), ('H', (3.2288918826202706, -2.9933526388909564, -1.492891198016186)), ('C', (1.6316122134337943, 1.932288426981515, -1.9085799230115208)), ('H', (5.15230426599051, 2.1907405999820053, 0.3391189121179091)), ('C', (-0.11377663056156491, 3.3912628204979836, -0.09312381373643631)), ('H', (0.5723885947705489, 0.4131923967836051, -2.841622748825696)), ('H', (2.2273956176375114, 3.2362353583438, -3.41368064152429)), ('C', (-1.0949148759947676, 1.8178371641931614, 2.1333118230293424)), ('H', (-1.7035276308642175, 4.162225726257766, -1.1775771659006693)), ('H', (0.9182538291563423, 5.027272426625719, 0.6571087964270742)), ('C', (-2.508598203462389, -0.6016321065620087, 1.4033200693956105)), ('H', (0.5044340432990854, 1.303138128580589, 3.3487024087004227)), ('H', (-2.3456905833650454, 3.01216864192214, 3.28079321065597)), ('C', (-4.797098115366579, -0.18187291149243776, -0.31178969289153796)), ('H', (-3.136969934699626, -1.5442652924628826, 3.1422932931950402)), ('H', (-1.1998853828116989, -1.927220181513037, 0.4868671492368294)), ('C', (-6.265795149798528, -2.615995118624408, -0.8146212484362351)), ('H', (-6.0532633216466625, 1.2259125807376297, 0.5547291041281454)), ('H', (-4.182940904045036, 0.6272662414538441, -2.12042389085372)), ('H', (-7.886046329766071, -2.282373419805456, -2.057569710194867)), ('H', (-5.056765382265739, -4.036026036147442, -1.716833192513566)), ('H', (-6.977231682606389, -3.4322585390636657, 0.9512219911410795))), 'formula': {'C': 9, 'H': 17}, 'smiles': '[CH2]/C=C/CCCCCC', 'graph': ({0: ('C', 0, None), 1: ('C', 0, None), 2: ('H', 0, None), 3: ('H', 0, None), 4: ('C', 0, None), 5: ('H', 0, None), 6: ('C', 0, None), 7: ('H', 0, None), 8: ('C', 0, None), 9: ('H', 0, None), 10: ('H', 0, None), 11: ('C', 0, None), 12: ('H', 0, None), 13: ('H', 0, None), 14: ('C', 0, None), 15: ('H', 0, None), 16: ('H', 0, None), 17: ('C', 0, None), 18: ('H', 0, None), 19: ('H', 0, None), 20: ('C', 0, None), 21: ('H', 0, None), 22: ('H', 0, None), 23: ('H', 0, None), 24: ('H', 0, None), 25: ('H', 0, None)}, {frozenset({0, 1}): (1, None), frozenset({0, 2}): (1, None), frozenset({0, 3}): (1, None), frozenset({1, 4}): (1, False), frozenset({1, 5}): (1, None), frozenset({4, 6}): (1, None), frozenset({4, 7}): (1, None), frozenset({8, 6}): (1, None), frozenset({9, 6}): (1, None), frozenset({10, 6}): (1, None), frozenset({8, 11}): (1, None), frozenset({8, 12}): (1, None), frozenset({8, 13}): (1, None), frozenset({11, 14}): (1, None), frozenset({11, 15}): (1, None), frozenset({16, 11}): (1, None), frozenset({17, 14}): (1, None), frozenset({18, 14}): (1, None), frozenset({19, 14}): (1, None), frozenset({17, 20}): (1, None), frozenset({17, 21}): (1, None), frozenset({17, 22}): (1, None), frozenset({20, 23}): (1, None), frozenset({24, 20}): (1, None), frozenset({25, 20}): (1, None)}),
    },
    'InChI=1S/C7H13/c1-3-5-7-6-4-2/h3,5H,1,4,6-7H2,2H3/b5-3+': {'inchi': 'InChI=1S/C7H13/c1-3-5-7-6-4-2/h3,5H,1,4,6-7H2,2H3/b5-3+', 'geom': (('C', (5.95442119665459, -1.8347880075385181, -0.32620074432427937)), ('C', (4.039127076719319, -0.37887686007141635, 0.6922803790740953)), ('H', (7.224736672162103, -2.917718240445632, 0.862463444754451)), ('H', (6.244868322685208, -1.9349113668436504, -2.356548949681926)), ('C', (2.3431186661082974, 1.0572205089702602, -0.6946482059092939)), ('H', (3.8403335574995316, -0.3509712743767806, 2.744033512254803)), ('C', (0.2493777081460423, 2.599291829401486, 0.4155545544404273)), ('H', (2.4964415952973185, 1.039330471740551, -2.7503640947750867)), ('C', (-2.3919378508333753, 1.6812420906666932, -0.38773022696918624)), ('H', (0.46139364106565783, 4.581253597316786, -0.17225798496610834)), ('H', (0.38194010612078344, 2.577365337167799, 2.4861747132577063)), ('C', (-3.017786797693126, -0.9746621540012587, 0.5607063078629686)), ('H', (-2.5289505538335693, 1.7232242462698644, -2.4598300413426983)), ('H', (-3.811870502597885, 3.0197558923158527, 0.3184925514585369)), ('C', (-5.6511522788627415, -1.8502365186141358, -0.23240607781330552)), ('H', (-1.5934907683049335, -2.3063823902293974, -0.14368532594918598)), ('H', (-2.8654578644460957, -1.0080347173768438, 2.630995764608292)), ('H', (-5.830358786792159, -1.88663831296883, -2.295926535577239)), ('H', (-6.057638037627097, -3.753262536542936, 0.47061172510564114)), ('H', (-7.112938584853892, -0.5781749361667007, 0.5004977437797566))), 'formula': {'C': 7, 'H': 13}, 'smiles': '[CH2]/C=C/CCCC', 'graph': ({0: ('C', 0, None), 1: ('C', 0, None), 2: ('H', 0, None), 3: ('H', 0, None), 4: ('C', 0, None), 5: ('H', 0, None), 6: ('C', 0, None), 7: ('H', 0, None), 8: ('C', 0, None), 9: ('H', 0, None), 10: ('H', 0, None), 11: ('C', 0, None), 12: ('H', 0, None), 13: ('H', 0, None), 14: ('C', 0, None), 15: ('H', 0, None), 16: ('H', 0, None), 17: ('H', 0, None), 18: ('H', 0, None), 19: ('H', 0, None)}, {frozenset({0, 1}): (1, None), frozenset({0, 2}): (1, None), frozenset({0, 3}): (1, None), frozenset({1, 4}): (1, False), frozenset({1, 5}): (1, None), frozenset({4, 6}): (1, None), frozenset({4, 7}): (1, None), frozenset({8, 6}): (1, None), frozenset({9, 6}): (1, None), frozenset({10, 6}): (1, None), frozenset({8, 11}): (1, None), frozenset({8, 12}): (1, None), frozenset({8, 13}): (1, None), frozenset({11, 14}): (1, None), frozenset({11, 15}): (1, None), frozenset({16, 11}): (1, None), frozenset({17, 14}): (1, None), frozenset({18, 14}): (1, None), frozenset({19, 14}): (1, None)}),
    },
    'InChI=1S/C6H11/c1-3-5-6-4-2/h3,5H,1,4,6H2,2H3/b5-3+': {'inchi': 'InChI=1S/C6H11/c1-3-5-6-4-2/h3,5H,1,4,6H2,2H3/b5-3+', 'geom': (('C', (5.311989903043948, 0.8587558020963026, -0.3490361948243118)), ('C', (3.0669385742162842, 0.06325480259744988, 0.7246665054121916)), ('H', (5.69066456241994, 0.5749435044921678, -2.347223151252792)), ('H', (6.761309685785452, 1.7878906742830314, 0.7625120505267354)), ('C', (1.1259366200702832, -1.134563219832998, -0.563709082676321)), ('H', (2.7934574093400273, 0.3988852802877638, 2.7402313832903817)), ('C', (-1.3182370403229973, -1.9511025402865727, 0.5993908913772158)), ('H', (1.3533935051610146, -1.4701464543701757, -2.584922351943505)), ('C', (-3.621983262607381, -0.5391445327714947, -0.4841440538900446)), ('H', (-1.5895242331675976, -3.9875337740420687, 0.28709664161018056)), ('H', (-1.2483360709423121, -1.6679062933993374, 2.6538954657965905)), ('C', (-3.5724176360627475, 2.2911511976582073, 0.07836505269661068)), ('H', (-3.699709587873587, -0.8429784786748553, -2.534988228804407)), ('H', (-5.347127470620711, -1.3797986483120368, 0.2994592299229257)), ('H', (-1.8868008294156193, 3.180426076680654, -0.7284629651982363)), ('H', (-3.5437712777269326, 2.6359714134966223, 2.1213422977506924)), ('H', (-5.23691864298401, 3.2401546503279994, -0.7021466391751107))), 'formula': {'C': 6, 'H': 11}, 'smiles': '[CH2]/C=C/CCC', 'graph': ({0: ('C', 0, None), 1: ('C', 0, None), 2: ('H', 0, None), 3: ('H', 0, None), 4: ('C', 0, None), 5: ('H', 0, None), 6: ('C', 0, None), 7: ('H', 0, None), 8: ('C', 0, None), 9: ('H', 0, None), 10: ('H', 0, None), 11: ('C', 0, None), 12: ('H', 0, None), 13: ('H', 0, None), 14: ('H', 0, None), 15: ('H', 0, None), 16: ('H', 0, None)}, {frozenset({0, 1}): (1, None), frozenset({0, 2}): (1, None), frozenset({0, 3}): (1, None), frozenset({1, 4}): (1, False), frozenset({1, 5}): (1, None), frozenset({4, 6}): (1, None), frozenset({4, 7}): (1, None), frozenset({8, 6}): (1, None), frozenset({9, 6}): (1, None), frozenset({10, 6}): (1, None), frozenset({8, 11}): (1, None), frozenset({8, 12}): (1, None), frozenset({8, 13}): (1, None), frozenset({11, 14}): (1, None), frozenset({11, 15}): (1, None), frozenset({16, 11}): (1, None)}),
    },
    'InChI=1S/C5H9/c1-3-5-4-2/h3,5H,1,4H2,2H3/b5-3+': {'inchi': 'InChI=1S/C5H9/c1-3-5-4-2/h3,5H,1,4H2,2H3/b5-3+', 'geom': (('C', (-4.775885939608314, -0.4878554760004438, -0.2193858648089011)), ('C', (-2.43090211381419, 0.6598753554747444, -0.32655601283586544)), ('H', (-6.4192239036505745, 0.3479193666841662, -1.1139406386258768)), ('H', (-5.040581767727318, -2.268378108120315, 0.7685440563191969)), ('C', (-0.24518062642140045, -0.28408063871394984, 0.7643847691170642)), ('H', (-2.282532156799994, 2.4465736125726116, -1.3445061231929865)), ('C', (2.292368181283002, 0.9553642708080833, 0.618225791669654)), ('H', (-0.3502626270797339, -2.07415583639801, 1.7808174293954426)), ('C', (4.272035821681995, -0.7099757745128824, -0.6968365087625742)), ('H', (2.1322592455774623, 2.76692943399085, -0.37610274211924427)), ('H', (2.964957614129827, 1.392764059258803, 2.535757347337469)), ('H', (4.484170807347515, -2.521019373285023, 0.28402583665631154)), ('H', (6.120862604606541, 0.21905705246307142, -0.7248384704896083)), ('H', (3.7157344654174693, -1.1096509603210876, -2.6487629696398467))), 'formula': {'C': 5, 'H': 9}, 'smiles': '[CH2]/C=C/CC', 'graph': ({0: ('C', 0, None), 1: ('C', 0, None), 2: ('H', 0, None), 3: ('H', 0, None), 4: ('C', 0, None), 5: ('H', 0, None), 6: ('C', 0, None), 7: ('H', 0, None), 8: ('C', 0, None), 9: ('H', 0, None), 10: ('H', 0, None), 11: ('H', 0, None), 12: ('H', 0, None), 13: ('H', 0, None)}, {frozenset({0, 1}): (1, None), frozenset({0, 2}): (1, None), frozenset({0, 3}): (1, None), frozenset({1, 4}): (1, False), frozenset({1, 5}): (1, None), frozenset({4, 6}): (1, None), frozenset({4, 7}): (1, None), frozenset({8, 6}): (1, None), frozenset({9, 6}): (1, None), frozenset({10, 6}): (1, None), frozenset({8, 11}): (1, None), frozenset({8, 12}): (1, None), frozenset({8, 13}): (1, None)}),
    },
    'InChI=1S/C4H7/c1-3-4-2/h3-4H,1H2,2H3/b4-3+': {'inchi': 'InChI=1S/C4H7/c1-3-4-2/h3-4H,1H2,2H3/b4-3+', 'geom': (('C', (-3.702699134604061, -0.15609515741506752, 2.8345891881867422e-05)), ('C', (-1.2437270289223203, 0.7253468068173563, -9.448630627289141e-06)), ('H', (-5.300575957246182, 1.1268096735402446, -0.0002834589188186742)), ('H', (-4.107675002194175, -2.1692147296869155, 0.0002229876828040237)), ('C', (0.893936833373951, -0.7888378251804885, 0.00018519316029486714)), ('H', (-0.9554039550567178, 2.766704556581921, -0.00014550891166025277)), ('C', (3.543021056455126, 0.1870791069680741, -2.0786987380036108e-05)), ('H', (0.6426410532105691, -2.8324349004037206, -0.0006897500357921073)), ('H', (4.593376190411598, -0.4753284815147839, 1.6632462287739584)), ('H', (3.5909104959264777, 2.255475058135689, -0.0009524219672307454)), ('H', (4.593529258227759, -0.4769668740655558, -1.662501676680528))), 'formula': {'C': 4, 'H': 7}, 'smiles': '[CH2]/C=C/C', 'graph': ({0: ('C', 0, None), 1: ('C', 0, None), 2: ('H', 0, None), 3: ('H', 0, None), 4: ('C', 0, None), 5: ('H', 0, None), 6: ('C', 0, None), 7: ('H', 0, None), 8: ('H', 0, None), 9: ('H', 0, None), 10: ('H', 0, None)}, {frozenset({0, 1}): (1, None), frozenset({0, 2}): (1, None), frozenset({0, 3}): (1, None), frozenset({1, 4}): (1, False), frozenset({1, 5}): (1, None), frozenset({4, 6}): (1, None), frozenset({4, 7}): (1, None), frozenset({8, 6}): (1, None), frozenset({9, 6}): (1, None), frozenset({10, 6}): (1, None)}),
    },
}


# # "constructor"
def from_data(fml_slyr, main_lyr_dct=None,
              char_lyr_dct=None, ste_lyr_dct=None,
              iso_lyr_dct=None):
    """ Build an InChI string from each of the various layers.

        :param fml_slyr: sublayer of InChI string containing molecular formula
        :type fml_slyr: str
        :param main_lyr_dct: information for connectivity layer of InChI
        :type main_lyr_dct: dict[str: str]
        :param char_lyr_dct: information for charge layer of InChI
        :type char_lyr_dct: dict[str: str]
        :param ste_lyr_dct: information for stereochemistry layer of InChI
        :type ste_lyr_dct: dict[str: str]
        :param iso_lyr_dct: information for isotope layer of InChI
        :type iso_lyr_dct: dict[str: str]
        :rtype: str
    """

    main_dct = dict_.empty_if_none(main_lyr_dct)
    char_dct = dict_.empty_if_none(char_lyr_dct)
    ste_dct = dict_.empty_if_none(ste_lyr_dct)
    iso_dct = dict_.empty_if_none(iso_lyr_dct)

    main_slyrs = [
        pfx + slyr for pfx, slyr
        in zip(MAIN_PFXS, dict_.values_by_key(main_dct, MAIN_PFXS)) if slyr]
    char_slyrs = [
        pfx + slyr for pfx, slyr
        in zip(CHAR_PFXS, dict_.values_by_key(char_dct, CHAR_PFXS)) if slyr]
    ste_slyrs = [
        pfx + slyr for pfx, slyr
        in zip(STE_PFXS, dict_.values_by_key(ste_dct, STE_PFXS)) if slyr]
    iso_slyrs = [
        pfx + slyr for pfx, slyr
        in zip(ISO_PFXS, dict_.values_by_key(iso_dct, ISO_PFXS)) if slyr]

    ich = '/'.join(['InChI=1', fml_slyr] + main_slyrs + char_slyrs +
                   ste_slyrs + iso_slyrs)

    return ich


# # recalculate/standardize
def recalculate(ich, stereo=False):
    """ Recalculate an InChI string.

        :param ich: InChI string
        :type ich: str
        :param stereo: force the same stereochem in recalculated InChI
        :type stereo: bool
        :rtype: str
    """

    # for now, just assert that we have no multi-component strings with
    # hardcoded parts -- these are guaranteed to fail
    ichs = split(ich)
    if len(ichs) > 1:
        if any(hardcoded_object_from_inchi_by_key('inchi', ich)
               for ich in ichs):
            ref_ichs = []
            for ich_i in ichs:
                ref_ichs.append(recalculate(ich_i))
            ref_ichs.sort()
            ret = join(ref_ichs)
            return ret
        # raise error.FailedInchiGenerationError

    ret = hardcoded_object_from_inchi_by_key('inchi', ich)
    if ret is None:
        _options = '-SUU' if stereo else ''
        rdm = rdkit_.from_inchi(ich)
        ret = rdkit_.to_inchi(rdm, options=_options, with_aux_info=False)

    return ret


def standard_form(ich, stereo=True):
    """ Return an InChI string in standard form.

        Eventually we should just designate standard-form as standard InChI
        ordering for all but the hardcoded exceptions, put at the end.

        :param ich: InChI string
        :type ich: str
        :param stereo: parameter to include stereochemistry information
        :type stereo: bool
        :rtype: str
    """
    fml_slyr = formula_sublayer(ich)
    main_dct = main_sublayers(ich)
    char_dct = charge_sublayers(ich)

    if stereo:
        ste_dct = stereo_sublayers(ich)
        iso_dct = isotope_sublayers(ich)
    else:
        ste_dct = {}
        iso_dct = dict_.by_key(isotope_sublayers(ich), ISO_NONSTE_PFXS)
    ich = from_data(fml_slyr,
                    main_lyr_dct=main_dct,
                    char_lyr_dct=char_dct,
                    ste_lyr_dct=ste_dct,
                    iso_lyr_dct=iso_dct)
    return recalculate(ich)


# # getters
def version(ich):
    """ Determine version of InChI the string corresponds to.

        :param ich: InChI string
        :type ich: str
        :rtype: str
    """
    ptt = app.capturing(version_pattern())
    ver = apf.first_capture(ptt, ich)
    return ver


def formula_sublayer(ich):
    """ Parse the InChI string for the formula sublayer.

        :param ich: InChI string
        :type ich: str
        :rtype: dict[str: str]
    """
    ptt = (version_pattern() +
           SLASH + app.capturing(_formula_sublayer_pattern()))
    lyr = apf.first_capture(ptt, ich)
    return lyr


def formula_string(ich):
    """ Generate a formula string from an InChI string.

        :param ich: InChI string
        :type ich: str
        :rtype: str
    """
    return formula_sublayer(ich)


def main_sublayers(ich):
    """ Parse the InChI string for the sublayers of the connectivity layer,
        organized by prefix.

        :param ich: InChI string
        :type ich: str
        :rtype: dict[str: str]
    """
    return _sublayers(_main_layer(ich))


def charge_sublayers(ich):
    """ Parse the InChI string for the sublayers of the charge layer,
        organized by prefix.

        :param ich: InChI string
        :type ich: str
        :rtype: dict[str: str]
    """
    return _sublayers(_charge_layer(ich))


def stereo_sublayers(ich):
    """ Parse the InChI string for the sublayers of the stereochemisty layer,
        organized by prefix.

        :param ich: InChI string
        :type ich: str
        :rtype: dict[str: str]
    """
    return _sublayers(_stereo_layer(ich))


def isotope_sublayers(ich):
    """ Parse the InChI string for the sublayers of the isotope layer,
        organized by prefix.

        :param ich: InChI string
        :type ich: str
        :rtype: dict[str: str]
    """
    return _sublayers(_isotope_layer(ich))


# # conversions
def inchi_key(ich):
    """ Generate an InChIKey from an InChI string.

        :param ich: InChI string
        :type ich: str
        :rtype: str
    """
    return rdkit_.inchi_to_inchi_key(ich)


def smiles(ich):
    """ Convert a SMILES string into an InChI string.

        :param smi: SMILES string
        :type smi: str
        :rtype: str
    """

    # split it up to handle hard-coded molecules in multi-component inchis
    ichs = split(ich)
    smis = list(map(_connected_smiles, ichs))
    smi = '.'.join(smis)
    return smi


def _connected_smiles(ich):
    """ Convert a SMILES string into an InChI string.

        :param smi: SMILES string
        :type smi: str
        :rtype: str
    """

    smi = hardcoded_object_from_inchi_by_key('smiles', ich)
    if smi is None:
        ich = standard_form(ich)
        rdm = rdkit_.from_inchi(ich)
        smi = rdkit_.to_smiles(rdm)

    return smi


def formula(ich):
    """ Generate a formula dictionary from an InChI string.

        :param ich: InChI string
        :type ich: str
        :rtype: dict[str: int]
    """

    # split it up to handle hard-coded molecules in multi-component inchis
    ichs = split(ich)
    fmls = list(map(_connected_formula, ichs))
    fml = functools.reduce(automol.formula.join, fmls)

    return fml


def _connected_formula(ich):
    """ Create a combined molecular from the formulas of a
        multi-component InChI string.

        :param ich: InChI string
        :type ich: str
        :rtype: dict[str: int]
    """

    fml = hardcoded_object_from_inchi_by_key('formula', ich)
    if fml is None:
        ich = standard_form(ich)
        rdm = rdkit_.from_inchi(ich)
        fml = rdkit_.to_formula(rdm)

    return fml


# # properties
def is_standard_form(ich):
    """ Determine if the InChI string is closed.

        :param ich: InChI string
        :type ich: str
        :rtype: bool
    """
    return ich == standard_form(ich)


def is_complete(ich):
    """ Determine if the InChI string is complete
        (has all stereo-centers assigned).

        :param ich: InChI string
        :type ich: str
        :rtype: bool
    """
    return equivalent(ich, standard_form(ich)) and not (
        has_stereo(ich) ^ has_stereo(recalculate(ich, stereo=True)))


def has_multiple_components(ich):
    """ Determine if the InChI string has multiple components.

        :param ich: InChI string
        :type ich: str
        :rtype: bool
    """
    return len(split(ich)) > 1


def is_chiral(ich):
    """ Determine if the InChI string has chirality information.

        :param ich: InChI string
        :type ich: str
        :rtype: bool
    """
    ste_dct = stereo_sublayers(ich)
    iso_dct = isotope_sublayers(ich)
    return ste_dct['s'] == '1' or iso_dct['s'] == '1'


def has_stereo(ich):
    """ Determine if the InChI string has stereochemistry information.

        :param ich: InChI string
        :type ich: str
        :rtype: bool
    """
    ste_dct = stereo_sublayers(ich)
    iso_dct = isotope_sublayers(ich)
    return bool(ste_dct or
                any(pfx in iso_dct for pfx in STE_PFXS))


def low_spin_multiplicity(ich):
    """ Guess spin multiplicity based on the number of electrons.

        :param ich: InChI string
        :type ich: str
        :rtype: int
    """

    fml = formula(ich)
    nelec = automol.formula.electron_count(fml)

    if (nelec % 2) == 0:
        mult = 1
    else:
        mult = 2

    return mult


# # comparisons
def same_connectivity(ich1, ich2):
    """ Determine if two InChI strings have the same connectivity.

        :param ich1: InChI string 1
        :type ich1: str
        :param ich2: InChI string 2
        :type ich2: str
        :rtype: bool
    """
    return (standard_form(ich1, stereo=False) ==
            standard_form(ich2, stereo=False))


def equivalent(ich1, ich2):
    """ Determine if two InChI strings are equivalent. Currently
        the srings are only checked up to the isotope sublayer.

        :param ich1: InChI string 1
        :type ich1: str
        :param ich2: InChI string 2
        :type ich2: str
        :rtype: bool
    """
    return (formula_sublayer(ich1) == formula_sublayer(ich2) and
            main_sublayers(ich1) == main_sublayers(ich2) and
            charge_sublayers(ich1) == charge_sublayers(ich2) and
            stereo_sublayers(ich1) == stereo_sublayers(ich2) and
            isotope_sublayers(ich1) == isotope_sublayers(ich2))


# # sort
def sorted_(ichs):
    """ Sort a sequence of InChI strings in their standard form sort order.

        :param ichs: sequence of InChI strings
        :type ichs: tuple(str)
        :rtype: tuple(str)
    """
    return tuple(ichs[idx] for idx in argsort(ichs))


def argsort(ichs):
    """ Determine the sort order for the InChI standard form.

        :param ichs: sequence of InChI strings
        :type ichs: tuple(str)
    """

    assert not any(map(has_multiple_components, ichs))
    ref_ichs = list(map(standard_form, split(recalculate(join(ichs)))))
    idxs = tuple(numpy.argsort(list(map(ref_ichs.index, ichs))))
    return idxs


# # split/join
def split(ich):
    """ Split a multi-component InChI into InChIs for each of its components.

        (fix this for /s [which should be removed in split/join operations]
         and /m, which is joined as /m0110..  with no separators)

        :param ich: InChI string
        :type ich: str
        :rtype: tuple(str)
    """
    fml_slyr = formula_sublayer(ich)
    main_dct = main_sublayers(ich)
    char_dct = charge_sublayers(ich)
    ste_dct = stereo_sublayers(ich)
    iso_dct = isotope_sublayers(ich)
    fml_slyrs = _split_sublayer_string(
        fml_slyr, count_sep_ptt='', sep_ptt=app.escape('.'))
    count = len(fml_slyrs)

    main_dcts = _split_sublayers(main_dct, count)
    char_dcts = _split_sublayers(char_dct, count)
    ste_dcts = _split_sublayers(ste_dct, count)
    iso_dcts = _split_sublayers(iso_dct, count)

    ichs = tuple(from_data(fml_slyr=fml_slyr,
                           main_lyr_dct=main_dct,
                           char_lyr_dct=char_dct,
                           ste_lyr_dct=ste_dct,
                           iso_lyr_dct=iso_dct)
                 for fml_slyr, main_dct, char_dct, ste_dct, iso_dct
                 in zip(fml_slyrs, main_dcts, char_dcts, ste_dcts, iso_dcts))
    return ichs


def join(ichs):
    """ Join separate InChI strings into one multi-component InChI string.

        Currently:
        (fix for /s [which should be removed in split/join operations] and /m,
         which is joined as /m0110..  with no separators).

        :param ichs: sequence of InChI strings
        :type ichs: tuple(str)
        :rtype: str
    """
    # first, make sure they are completely split up
    ichs = list(itertools.chain(*map(split, ichs)))
    fmls = list(map(formula_sublayer, ichs))
    fml_slyr = _join_sublayer_strings(fmls, count_sep='', sep='.')
    main_dct = _join_sublayers(list(map(main_sublayers, ichs)))
    char_dct = _join_sublayers(list(map(charge_sublayers, ichs)))
    ste_dct = _join_sublayers(list(map(stereo_sublayers, ichs)))
    iso_dct = _join_sublayers(list(map(isotope_sublayers, ichs)))

    return from_data(fml_slyr=fml_slyr,
                     main_lyr_dct=main_dct,
                     char_lyr_dct=char_dct,
                     ste_lyr_dct=ste_dct,
                     iso_lyr_dct=iso_dct)


# # hardcoded inchi workarounds
def hardcoded_object_from_inchi_by_key(key, ich):
    """ Obtains the requested structural identifier object
        for certain hardcoded InChI string.

        InChI strings: C, B, N, CH, CF, CCl, CBr, CI

        :param key: key for structural identifier
        :type key: str
        :param ich: InChI string
        :type ich: str
        :rtype: obj
    """

    obj = None
    for ich_, obj_dct in HARDCODED_INCHI_DCT.items():
        if equivalent(ich, ich_):
            obj = obj_dct[key]
    return obj


def hardcoded_object_to_inchi_by_key(key, obj, comp=operator.eq):
    """ Convert a structural identifier to an InChI string object if that
        InChI <=> relation is hardoded in automol.

        InChI strings: C, B, N, CH, CF, CCl, CBr, CI

        :param key: key for structural identifier
        :type key: str
        :param obj: obj for structural identifier
        :type obj: str
        :param ich: InChI string
        :type ich: str
        :rtype: str
    """
    ich = None
    for ich_, obj_dct in HARDCODED_INCHI_DCT.items():
        obj_ = obj_dct[key]
        if comp(obj, obj_):
            ich = ich_
    return ich


# # helpers
def version_pattern():
    """ Build the autoparse regex pattern for the InChI string version.

        :rtype: str
    """
    ptt = app.preceded_by('InChI=') + _sublayer_pattern()
    return ptt


def _join_sublayers(dcts):
    """ Join all of the components of an InChI sublayer.

        :param dcts: sublayer components, grouped by prefix
        :type dct: dict[str: str]
        :rtype: dict[str: str]
    """

    pfxs = sorted(functools.reduce(set.union, map(set, dcts)))
    if 's' in pfxs:
        pfxs.remove('s')
    dcts = [dict_.by_key(dct, pfxs, fill_val='') for dct in dcts]
    slyrs_lst = [[dct[pfx] for dct in dcts] for pfx in pfxs]
    dct = {pfx: (_join_sublayer_strings(slyrs) if pfx != 'm' else
                 _join_m_sublayer_strings(slyrs))
           for pfx, slyrs in zip(pfxs, slyrs_lst)}

    return dct


def _join_m_sublayer_strings(m_slyrs):
    m_slyrs = [m_slyr if m_slyr else '.' for m_slyr in m_slyrs]
    return ''.join(m_slyrs)


def _join_sublayer_strings(slyrs, count_sep='*', sep=';'):
    """ Join sublayer strings into one multi-component sublayer string.

        :param slyrs: sublayers to join
        :type slyrs: tuple(str)?
        :param count_sep: delimiter for ???
        :type count_sep: str
        :param sep: delimiter for ???
        :type sep: str
    """
    def _s(count, slyr):
        if count > 1 and slyr:
            ret = ('{:d}' + count_sep + '{:s}').format(count, slyr)
        elif slyr:
            ret = slyr
        else:
            ret = sep * (count - 1)
        return ret

    counts, slyrs = zip(*[
        (len(list(g)), slyr) for slyr, g in itertools.groupby(slyrs)])

    slyr = sep.join([_s(count, slyr) for count, slyr in zip(counts, slyrs)])
    return slyr


def _split_sublayers(dct, count):
    """ split a multi-component sublayer dictionary into separate ones
    """
    if dct:
        pfxs = sorted(dct.keys())
        if 's' in pfxs:
            pfxs.remove('s')
        slyrs_lst = [
            _split_sublayer_string(dct[pfx]) if pfx != 'm'
            else _split_m_sublayer_string(dct[pfx]) for pfx in pfxs]
        assert all(len(slyrs) == count for slyrs in slyrs_lst)
        dcts = tuple({pfx: slyr for pfx, slyr in zip(pfxs, slyrs) if slyr}
                     for slyrs in zip(*slyrs_lst))
    else:
        return ({},) * count
    return dcts


def _split_m_sublayer_string(m_slyr):
    return tuple(m_slyr)


def _split_sublayer_string(slyr, count_sep_ptt=app.escape('*'),
                           sep_ptt=app.escape(';')):
    count_ptt = app.UNSIGNED_INTEGER
    group_ptt = (app.STRING_START + app.capturing(count_ptt) + count_sep_ptt +
                 app.capturing(app.zero_or_more(app.WILDCARD)))

    def _expand_group(group_str):
        if apf.has_match(group_ptt, group_str):
            count, part = ap_cast(apf.first_capture(group_ptt, group_str))
            parts = [part] * count
        else:
            parts = [group_str]
        return parts

    parts = tuple(
        itertools.chain(*map(_expand_group, apf.split(sep_ptt, slyr))))
    return parts


def _sublayers(lyr):
    """ Parse the sublayers of the specified layer of an InChI string,
        organized by prefix.

        :param lyr: layer of the InChI string
        :type lyr: str
        :rtype: dict[str: str]
    """
    if lyr:
        ptt = _sublayer_pattern(key_ptt=app.capturing(app.LOWERCASE_LETTER),
                                val_ptt=app.capturing(NONSLASHES))
        dct = dict(apf.all_captures(ptt, lyr))
    else:
        dct = {}
    return dct


def _main_layer(ich):
    """ Parse the InChI string for the connectivity layer.

        :param ich: InChI string
        :type ich: str
        :rtype: str
    """
    ptt = (version_pattern() +
           SLASH + _formula_sublayer_pattern() +
           SLASH + app.capturing(_main_layer_pattern()))
    lyr = apf.first_capture(ptt, ich)
    return lyr


def _charge_layer(ich):
    """ Parse the InChI string for the charge layer.

        :param ich: InChI string
        :type ich: str
        :rtype: str
    """
    ptt = (version_pattern() +
           SLASH + _formula_sublayer_pattern() +
           app.maybe(SLASH + _main_layer_pattern()) +
           SLASH + app.capturing(_charge_layer_pattern()))
    lyr = apf.first_capture(ptt, ich)
    return lyr


def _stereo_layer(ich):
    """ Parse the InChI string for the stereochemisty layer.

        :param ich: InChI string
        :type ich: str
        :rtype: str
    """
    ptt = (version_pattern() +
           SLASH + _formula_sublayer_pattern() +
           app.maybe(SLASH + _main_layer_pattern()) +
           app.maybe(SLASH + _charge_layer_pattern()) +
           SLASH + app.capturing(_stereo_layer_pattern()))
    lyr = apf.first_capture(ptt, ich)
    return lyr


def _isotope_layer(ich):
    """ Parse the InChI string for the isotope layer.

        :param ich: InChI string
        :type ich: str
        :rtype: str
    """
    ptt = (version_pattern() +
           SLASH + _formula_sublayer_pattern() +
           app.maybe(SLASH + _main_layer_pattern()) +
           app.maybe(SLASH + _charge_layer_pattern()) +
           app.maybe(SLASH + _stereo_layer_pattern()) +
           SLASH + app.capturing(_isotope_layer_pattern()))
    lyr = apf.first_capture(ptt, ich)
    return lyr


def _formula_sublayer_pattern():
    """ Build the autoparse regex pattern for the chemical formual sublayer.

        :rtype: str
    """
    ptt = _sublayer_pattern(key_ptt=app.not_followed_by(app.LOWERCASE_LETTER))
    return ptt


def _main_layer_pattern():
    """ Build the autoparse regex pattern for the connectivity layer.

        :rtype: str
    """
    c_slyr_ptt = _sublayer_pattern(key_ptt='c')
    h_slyr_ptt = _sublayer_pattern(key_ptt='h')
    ptt = (app.one_of_these([c_slyr_ptt, h_slyr_ptt]) +
           app.maybe(SLASH + h_slyr_ptt))
    return ptt


def _charge_layer_pattern():
    """ Build the autoparse regex pattern for the charge layer.

        :rtype: str
    """
    q_slyr_ptt = _sublayer_pattern(key_ptt='q')
    p_slyr_ptt = _sublayer_pattern(key_ptt='p')
    ptt = (app.one_of_these([q_slyr_ptt, p_slyr_ptt]) +
           app.maybe(SLASH + p_slyr_ptt))
    return ptt


def _stereo_layer_pattern():
    """ Build the autoparse regex pattern for the stereochemistry layer.

        :rtype: str
    """
    b_slyr_ptt = _sublayer_pattern(key_ptt='b')
    t_slyr_ptt = _sublayer_pattern(key_ptt='t')
    m_slyr_ptt = _sublayer_pattern(key_ptt='m')
    s_slyr_ptt = _sublayer_pattern(key_ptt='s')
    ptt = (app.one_of_these([b_slyr_ptt, t_slyr_ptt]) +
           app.maybe(SLASH + t_slyr_ptt) +
           app.maybe(SLASH + m_slyr_ptt) +
           app.maybe(SLASH + s_slyr_ptt))
    return ptt


def _isotope_layer_pattern():
    """ Build the autoparse regex pattern for the isotope layer.

        :rtype: str
    """
    i_slyr_ptt = _sublayer_pattern(key_ptt='i')
    h_slyr_ptt = _sublayer_pattern(key_ptt='h')
    ptt = (i_slyr_ptt +
           app.maybe(SLASH + h_slyr_ptt) +
           app.maybe(SLASH + _stereo_layer_pattern()))
    return ptt


def _sublayer_pattern(key_ptt='',
                      val_ptt=NONSLASHES):
    """ Build the autoparse regex pattern for an arbitrary InChI sublayer.

        :rtype: str
    """
    return key_ptt + val_ptt
