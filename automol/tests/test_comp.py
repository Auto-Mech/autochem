"""
  Test geom comparison functions
"""


import automol.geom


GEO = (
    ('C', (-1.4283035320563338, 0.013425343735546437, -0.030302158896694683)),
    ('C', (1.4283027358735494, -0.013425597530894248, 0.0303022919384165)),
    ('H', (-2.1972722614281355, -0.19229727219177065, 1.8778380427620682)),
    ('H', (-2.121310184939721, 1.792702413487708, -0.8231106338374065)),
    ('H', (-2.1448124562913287, -1.5396513482615042, -1.191852168914227)),
    ('H', (2.1448121742707795, 1.539654946791746, 1.1918517388178247)),
    ('H', (2.1972712765396953, 0.1922944277301287, -1.8778395029874426)),
    ('H', (2.121312248031497, -1.7927029137609576, 0.8231123911174519)))
GEO2 = (
    ('C', (8.571696467943667, 10.013425343735546, 9.969697841103306)),
    ('C', (11.42830273587355, 9.986574402469106, 10.030302291938417)),
    ('H', (7.802727738571864, 9.807702727808229, 11.877838042762068)),
    ('H', (7.878689815060278, 11.792702413487708, 9.176889366162593)),
    ('H', (7.855187543708672, 8.460348651738496, 8.808147831085773)),
    ('H', (12.144812174270779, 11.539654946791746, 11.191851738817824)),
    ('H', (12.197271276539695, 10.192294427730129, 8.122160497012558)),
    ('H', (12.121312248031497, 8.207297086239043, 10.823112391117451)))
GEO3 = (
    ('C', (8.571696467943667, 10.013425343735546, 9.969697841103306)),
    ('H', (7.802727738571864, 9.807702727808229, 11.877838042762068)),
    ('H', (7.878689815060278, 11.792702413487708, 9.176889366162593)),
    ('H', (7.855187543708672, 8.460348651738496, 8.808147831085773)),
    ('C', (11.42830273587355, 9.986574402469106, 10.030302291938417)),
    ('H', (12.144812174270779, 11.539654946791746, 11.191851738817824)),
    ('H', (12.197271276539695, 10.192294427730129, 8.122160497012558)),
    ('H', (12.121312248031497, 8.207297086239043, 10.823112391117451)))
GEO_LST1 = (GEO, GEO2)
GEO_LST2 = (GEO, GEO2, GEO3)

CHECK_DCT = {
    'dist': None, 'stereo': None, 'coloumb': None}
CHECK_DCT2 = {
    'dist': 3.5e-1, 'stereo': None, 'coloumb': 1.5e-2}


# def test__newzma():
#     """ test
#     """
#
#     build_remdummy_shift_lst(zma)
#     shift_vals_from_dummy(vals, zma)
#     is_atom_closest_to_bond_atom(zma, idx_rad, bond_dist)
#     calc_rxn_angle(ts_zma, frm_bnd_keys, brk_bnd_keys, rxn_class)
#
#
def test__comp():
    """ test automol.comp.is_unique
    """

    assert automol.geom.is_unique(GEO, GEO_LST1, CHECK_DCT)
    assert automol.geom.is_unique(GEO, GEO_LST1, CHECK_DCT2)
    assert not automol.geom.is_unique(GEO, GEO_LST2, CHECK_DCT)


# test__newzma()
test__comp()
