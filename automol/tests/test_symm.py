""" symmetry functions
"""
import os
import pytest
import json

from automol import symm, geom, reac

PATH = os.path.dirname(os.path.realpath(__file__))
DAT_PATH = os.path.join(PATH, "data")

with open(os.path.join(DAT_PATH, "sym_geos.json"), "r") as json_file:
    GEO_DCT = json.load(json_file)

C2H2CLF_GEO = (
    ("F", (2.994881276150, -1.414434615111, -0.807144415388)),
    ("C", (1.170155936996, 0.359360756989, -0.513323178859)),
    ("C", (-1.201356763194, -0.347546894407, -0.3408392500119)),
    ("Cl", (-3.027970874978, 1.39211904938, -0.0492290974807)),
    ("H", (1.731596406235, 2.324260256203, -0.4292070203467)),
    ("H", (-1.66730598121, -2.31375855306, -0.433949091252)),
)
METHANE_GEO = (
    ("C", (1.2069668249, 1.9997649792, -0.0000004209)),
    ("H", (3.3034303116, 1.9997688296, -0.0000006619)),
    ("H", (0.5081497935, 0.1480118251, 0.6912478445)),
    ("H", (0.5081445849, 2.3270011544, -1.9492882688)),
    ("H", (0.5081426638, 3.5242779889, 1.2580393046)),
)
C2H5OF_GEO = (
    ("C", (-4.67963119210, -2.785693400767, -0.04102938592633)),
    ("C", (-1.806009533535, -2.594940600449, -0.1025157659970)),
    ("H", (-5.39544527869, -3.740953123044, -1.774996188159)),
    ("H", (-5.501156952723, -0.854962636480, -0.01317371318990)),
    ("O", (-5.48010155525, -4.07121874876, 2.132641999777597)),
    ("H", (-1.208455201406, -1.52313066520, -1.804561025201)),
    ("F", (-0.745999108314, -4.9827454242, -0.1878162481225)),
    ("H", (-1.11738479998, -1.591763680324, 1.607521773704)),
    ("H", (-5.30771129777, -5.90407965309, 1.771303996279)),
)
TS_GEO = (
    ("H", (4.2225665711697, 0.5285809637301855, -0.000115273293652927)),
    ("H", (5.671967612134, 1.5263110045449078, -0.000107714389151096)),
    ("C", (2.0564925663033, -0.8418843272482152, 1.88972612545783e-05)),
    ("C", (-0.10486279242778, 1.0206637570732786, 2.6456165756409e-05)),
    ("H", (2.2406936203823, -1.9817198829712406, -1.7116099895028005)),
    ("H", (2.2408051142237, -1.981638624747846, 1.7116912477261954)),
    ("C", (-2.687481568224, -0.29460263378049906, -2.0786987380036e-05)),
    ("H", (0.0414001199565, 2.250420040750089, -1.661449099228648)),
    ("H", (0.041366104886271, 2.250372797596953, 1.6615398060826698)),
    ("H", (-2.90949793179, -1.4943387282282867, -1.6725720272030926)),
    ("H", (-2.909531946870, -1.4944029789165523, 1.6724813203490707)),
    ("H", (-4.22464715963, 1.091354631974405, -9.448630627289141e-06)),
)
H_GEO = (("H", (-0.9827048283, 0.061897979239, 2.02901783816)),)
ETHANE_GEO = (
    ("C", (1.4236166963995767, -0.0005463915026946297, -0.12026553255573638)),
    ("C", (-1.4236167446548191, 0.0005458072813520547, 0.12026527459814479)),
    ("H", (2.2583526512388743, -1.412475077214288, 1.1384285229516025)),
    ("H", (1.9885694966447132, -0.4420417928292498, -2.059478240521989)),
    ("H", (2.1952646723795497, 1.8520461687255478, 0.3768223690386287)),
    ("H", (-2.2583520500667964, 1.412477609282213, -1.1384256640778236)),
    ("H", (-2.195265477018328, -1.852045791668039, -0.3768255126876725)),
    ("H", (-1.988569244922731, 0.4420394679251166, 2.0594787832548493)),
)
PROPENE_GEO = (
    ("C", (2.555715875044686, 0.3019783668285886, 0.4894322078389542)),
    ("C", (-2.070075685520825, -0.56721780739114, 0.014756519891773866)),
    ("C", (0.36255465713796226, 0.6612262744775793, -0.7187099751768709)),
    ("H", (2.7008929955718757, -0.9369335867989881, 2.1181037916379313)),
    ("H", (4.2648755947234935, 1.2502462465514244, -0.13444655267811148)),
    ("H", (-1.8564928029773031, -1.801463428549314, 1.660883894758828)),
    ("H", (-2.786497963207751, -1.7048170910425746, -1.5563940952537063)),
    ("H", (-3.4793159957943383, 0.8763179193940371, 0.46879918692957545)),
    ("H", (0.3083433250222546, 1.920663106530384, -2.342424977948383)),
)
PROPYL_GEO = (
    ("C", (-2.5910684108357263, -0.40342993147092104, 0.30962054618412865)),
    ("C", (2.0896967173646126, -0.508434471210753, -0.09633739413842066)),
    ("C", (-0.27339260671203974, 1.1173445252082026, -0.18068329845733122)),
    ("H", (-3.2233112326393742, -0.7318314171474708, 2.229878370405495)),
    ("H", (-3.537678558532123, -1.3680134555332613, -1.2293661626612542)),
    ("H", (2.3196740259944293, -1.4002071836120702, 1.757419735991962)),
    ("H", (2.0213661567156778, -2.0041352359511317, -1.5255940801569834)),
    ("H", (3.7661624112135414, 0.6473432643681897, -0.46128526578611523)),
    ("H", (-0.13747193323009502, 2.6258250474242355, 1.2299097831454633)),
    ("H", (-0.4339765693389156, 2.025538857924975, -2.033562234526955)),
)
ALLYL_GEO = (
    ("C", (2.24945472629382, -0.4582271117459069, 0.03290117823247412)),
    ("C", (-2.3355089199824097, -0.13953666913834403, 0.21490880892896197)),
    ("C", (0.12238712230420508, 0.8480074560503029, -0.3515748568494255)),
    ("H", (4.072935371765459, 0.36320202126528317, -0.42330305111123595)),
    ("H", (2.2393006846740384, -2.359226531020056, 0.803110681014293)),
    ("H", (-3.9887235442686664, 1.0155083120916595, -0.14050426534541738)),
    ("H", (-2.572208042123082, -2.0190150202817287, 0.9917737123689677)),
    ("H", (0.21236260133668847, 2.749287542778781, -1.1273122072385706)),
)
TS_GEO = (
    ('C', (-2.413119482427781, -0.06610519287806621, -0.10264958272220817)),
    ('C', (0.2456011587398691, -1.1447577722278461, 0.0024619274805836333)),
    ('C', (2.227773789661767, 0.9300090243465704, 0.10079135324989329)),
    ('H', (-2.811107460987221, 1.089094151703368, 1.566696258053535)),
    ('H', (-3.804568857499126, -1.5947664756553157, -0.17217341032597203)),
    ('H', (-2.6692334934295667, 1.1123238966976803, -1.7835145178284126)),
    ('H', (0.5735904268692151, -2.3331326788737963, -1.660946070672103)),
    ('H', (0.4324870185713748, -2.356238255157586, 1.6710319263033315)),
    ('H', (1.9764670280365864, 2.1166886144646284, 1.776569621618864)),
    ('H', (2.1183411179464744, 2.139924506549694, -1.5736415870369729)),
    ('H', (4.123768754518338, 0.10696018103069375, 0.17537408187949463)),
    ('H', (1.6848074073934185, 3.4939158599258366, 3.721431156079016))
)
ZRXN = reac.from_smiles(('CCC', '[H]'),('CC[CH2]', '[H][H]'))[0]

def test__external_symmetry_factor():
    """test geom.external_symmety_factor"""
    assert geom.external_symmetry_factor(METHANE_GEO) == 12
    assert geom.external_symmetry_factor(H_GEO) == 1
    assert geom.external_symmetry_factor(C2H5OF_GEO) == 0.5
    assert geom.external_symmetry_factor(C2H2CLF_GEO) == 1


def test__hco_symm_num_ts():
    """test internal symmetry number"""
    assert symm.oxygenated_hydrocarbon_symm_num(METHANE_GEO) == (1.0, 12)
    assert symm.oxygenated_hydrocarbon_symm_num(ETHANE_GEO) == (3.0, 6)
    assert symm.oxygenated_hydrocarbon_symm_num(PROPENE_GEO) == (3.0, 1)
    assert symm.oxygenated_hydrocarbon_symm_num(PROPYL_GEO) == (6.0, 1)
    assert symm.oxygenated_hydrocarbon_symm_num(ALLYL_GEO) == (1.0, 1)
    assert symm.oxygenated_hydrocarbon_symm_num(TS_GEO, ZRXN) == (3.0, 1)


@pytest.mark.parametrize("species_name, sym_numbs", [
    ("H", (1.0, 1.0)),
    ("O", (1.0, 1.0)),
    ("OH", (1.0, 1)),
    ("O2", (1.0, 2)),
    ("H2", (1.0, 2)),
    ("CHO", (1.0, 1)),
    ("H2O", (1.0, 2)),
    ("HO2", (1.0, 1)),
    ("H2O2", (1.0, 2)),
    ("CH3", (1.0, 6)),
    ("CH2O", (1.0, 2)),
    ("CH4", (1.0, 12)),
    ("C2H2O2-uO9pAY", (1.0, 2)),
    ("C2H3O-UPQcwB", (3.0, 1)),
    ("C2H4-S58kzk", (1.0, 4)),
    ("C2H3O-UPQQF7", (1.0, 1)),
    ("C2H5-S58eMK", (6.0, 1)),
    ("C2H4O-UPQWKw", (3.0, 1)),
    ("C3KET-Wv9qJr", (3.0, 1)),
    ("C3KALD-2cwWKw", (3.0, 1)),
    ("C3ALOX-gDNeMK", (3.0, 1)),
    ("C3DALD-8bQFbZ", (1.0, 2)),
    ("C3ALK-2LTLsA", (3.0, 1)),
    ("C3ALD-Wv9uaE", (2.0, 1)),
    ("C3ALD-Wv96xF", (3.0, 1)),
    ("C4DALD-RbBVHz", (1.0, 2)),
    ("C4ALK-808sWvE", (9.0, 2)),
    ("C4ALK-808sWvZ", (9.0, 2)),
    ("C4ALK-808adU", (3.0, 1)),
    ("C4KALD-q3b6xF", (3.0, 1)),
    ("C4KALD-RyF6xF", (3.0, 1)),
    ("C4DKET-mZN0v8", (9.0, 2)),
    ("C4KEOH-RyFn3YA1", (3.0, 0.5)),
    ("C4KEOH-RyFBqF", (2.0, 1)),
    ("C4KEOH-RyFn3YA0", (3.0, 0.5)),
    ("C4AAOH-mZNXbmE", (9.0, 1)),
    ("C4AAOH-Jm2BlaZ", (3.0, 1)),
    ("C4AAOH-Jm2BlaE", (3.0, 1)),
    ("C4AAOH-uz1BlaZ", (3.0, 1)),
    ("C4AAOH-mZNXbmZ", (9.0, 1)),
    ("C4CETH-2LKyxlA0", (3.0, 0.5)),
    ("C4KEOH-mZNdwkA0", (3.0, 0.5)),
    ("C4AAOH-mZNXqBA1", (3.0, 0.5)),
    ("C4AAOH-mZNXqBA0", (3.0, 0.5)),
    ("C4AAOH-uz1BlaE", (3.0, 1)),
    ("C4KEOH-mZN96JA1", (6.0, 0.5)),
    ("C4KEOH-mZN96JA0", (6.0, 0.5)),
    ("C4AAOH-RbB4szE", (1.0, 1)),
    ("C4AAOH-RbB4szZ", (1.0, 1)),
    ("C4AAOH-vMtdXFE", (1.0, 1)),
    ("C4AAOH-vMtdXFZ", (1.0, 1)),
    ("C4CETH-RvEsWvAB", (9.0, 1)),
    ("C4ADOH-RbBPs7", (1.0, 1)),
    ("C4ADOH-RbBj9P", (1.0, 1)),
    ("C4CETH-RvEsWvAA1", (9.0, 1)),
    ("C4KEOH-mZNdwkA1", (3.0, 0.5)),
    ("C4AAOH-RyFBlaZ", (3.0, 1)),
    ("C4ADOH-RyFFNeA0", (2.0, 0.5)),
    ("C4-808nWE", (9.0, 1)),
    ("C4-808cUn", (6.0, 1)),
    ("C4AAOH-q3bN0EEA1", (3.0, 0.5)),
    ("C4AAOH-q3bN0EZA1", (3.0, 0.5)),
    ("C4AAOH-q3bN0EEA0", (3.0, 0.5)),
    ("C4AAOH-q3bN0EZA0", (3.0, 0.5)),
    ("C4CETH-SqnyxlA0", (3.0, 0.5)),
    ("C4AAOH-q3bKk6EA1", (3.0, 0.5)),
    ("C4AAOH-q3bKk6ZA1", (3.0, 0.5)),
    ("C4CETH-SqnyxlA1", (3.0, 0.5)),
    ("C4AAOH-q3bKk6EA0", (3.0, 0.5)),
    ("C4AAOH-q3bKk6ZA0", (3.0, 0.5)),
    ("C4KEOH-q3bn3YA1", (3.0, 0.5)),
    ("C4KEOH-q3bn3YA0", (3.0, 0.5)),
    ("C4ADOH-RyFFNeA1", (2.0, 0.5)),
    ("C4AAOH-q3bBlaE", (3.0, 1)),
    ("C4ADOH-q3bFNeA1", (2.0, 0.5)),
    ("C4ADOH-q3bFNeA0", (2.0, 0.5)),
    ("C4AAOH-nN4BlaE", (3.0, 1)),
    ("C4AAOH-nN4BlaZ", (3.0, 1)),
    ("C4ADOH-q3bYSe", (3.0, 1)),
    ("C4KEOH-q3bBqF", (1.0, 1)),
    ("C4AAOH-q3bsEZ", (1.0, 1)),
    ("C4ADOH-RyFKk6A0", (3.0, 0.5)),
    ("C4ADOH-RyFKk6A1", (3.0, 0.5)),
    ("C4AAOH-ZnVBlaE", (3.0, 1)),
    ("C4AAOH-ZnVBlaZ", (3.0, 1)),
    ("C4AAOH-RyFBlaE", (3.0, 1)),
    ("C4CETH-2LKyxlA1", (3.0, 0.5)),
    ("C4CETH-FCWSI1", (1.0, 2)),
    ("C4AAOH-q3bBlaZ", (3.0, 1)),
    ("C4KEOH-q3bHhi", (3.0, 1)),
    ("C4KEOH-RbBBqF", (1.0, 1)),
    ("C4AKOX-RbByrZ", (1.0, 1)),
    ("C4AKOX-RyF8pfA1", (3.0, 0.5)),
    ("C4KKOX-mZN0BQA1", (9.0, 0.5)),
    ("C4KKOX-mZN0BQA0", (9.0, 0.5)),
    ("C4KKOX-q3b40k", (3.0, 1)),
    ("C4AKOX-RyF8pfA0", (3.0, 0.5)),
    ("C4AKOX-q3b8pfA0", (3.0, 0.5)),
    ("C4AKOX-q3b8pfA1", (3.0, 0.5)),
    ("C4KKOX-RyF40k", (3.0, 1)),
    ("C4ANHY-ZUsgvGZ", (3.0, 1)),
    ("C4ANHY-ZUsjatZ", (3.0, 1)),
    ("C4ANHY-ZUsjatE", (3.0, 1)),
    ("C4ANHY-OAz3cEZ", (9.0, 1)),
    ("C4ANHY-ZUsgvGE", (3.0, 1)),
    ("C4ANHY-OAz3cEE", (9.0, 1)),
    ("C4ANHY-ZUsBOc", (1.0, 1)),
    ("C4ANHY-OAztob", (3.0, 1)),
    ("C4ANHY-OAzeCUA0", (3.0, 0.5)),
    ("C4-808zqE", (9.0, 1)),
    ("C4ANHY-OAzeCUA1", (3.0, 0.5)),
    ("C4QOOH-ZUsHCf", (3.0, 1)),
    ("C4CEHY-0vRjatAA0", (3.0, 0.5)),
    ("C4QOOH-OAz243A1", (6.0, 0.5)),
    ("C4CEHY-0vRjatAB0", (3.0, 0.5)),
    ("C4CEHY-yW2WwKA1", (1.0, 0.5)),
    ("C4CEHY-yW2WwKA0", (1.0, 0.5)),
    ("C4QOOH-OAz243A0", (6.0, 0.5)),
    ("C4CEHY-0vRjatAA1", (3.0, 0.5)),
    ("C4CEHY-0vRjatAB1", (3.0, 0.5)),
    ("C4AHP-cKXdD3A1", (3.0, 0.5)),
    ("C4CEHY-2m1jatAA0", (3.0, 0.5)),
    ("C4AHP-9Jv1V8", (1.0, 1)),
    ("C4RO2-ZUssfD", (3.0, 1)),
    ("C4QOOH-ZUsHMd", (3.0, 1)),
    ("C4KHP-LKXOOsA1", (9.0, 0.5)),
    ("C4KHP-LKXOOsA0", (9.0, 0.5)),
    ("C4RO2-OAzhmnA0", (9.0, 0.5)),
    ("C4QOOH-OAzHO1", (9.0, 1)),
    ("C4RO2-OAzhmnA1", (9.0, 0.5)),
    ("C4KHP-aiQAr5", (3.0, 1)),
    ("C4KHP-rtmAr5", (3.0, 1)),
    ("C4AHP-j42dD3A1", (3.0, 0.5)),
    ("C4AHP-cKXdD3A0", (3.0, 0.5)),
    ("C4CEHY-2m1jatAB0", (3.0, 0.5)),
    ("C4AHP-j42dD3A0", (3.0, 0.5)),
    ("instabspc", (9.0, 1)),
    ("instabspcb", (3.0, 1))
])
def test__hco_symm_num(species_name, sym_numbs):
    """test internal symmetry number"""
    assert symm.oxygenated_hydrocarbon_symm_num(
        GEO_DCT[species_name]) == sym_numbs


@pytest.mark.parametrize("species_name, sym_numbs", [
    ("C4KEOH-RyFn3YA1", (3.0, 1)),
    ("C4KEOH-RyFBqF", (2.0, 1)),
    ("C4KEOH-RyFn3YA0", (3.0, 1)),
    ("C4CETH-2LKyxlA0", (3.0, 1)),
    ("C4KEOH-mZNdwkA0", (3.0, 1)),
    ("C4AAOH-mZNXqBA1", (3.0, 1)),
    ("C4AAOH-mZNXqBA0", (3.0, 1)),
    ("C4AAOH-uz1BlaE", (3.0, 1)),
    ("C4KEOH-mZN96JA1", (6.0, 1)),
    ("C4KEOH-mZN96JA0", (6.0, 1)),
    ("C4AAOH-RbB4szE", (1.0, 1))
])
def test__hco_symm_num_nonracemic(species_name, sym_numbs):
    """test internal symmetry number"""
    assert symm.oxygenated_hydrocarbon_symm_num(
        GEO_DCT[species_name], account_for_enantiomer=False) == sym_numbs


if __name__ == "__main__":
    test__external_symmetry_factor()
    test__hco_symm_num_ts()
    test__hco_symm_num()
    test__hco_symm_num_nonracemic()
