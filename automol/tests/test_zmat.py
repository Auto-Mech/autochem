""" test automol.zmat
"""

import pytest
import numpy
from automol import zmat
# from automol import geom

CH4O2_ZMA = (
    ('C', (None, None, None), (None, None, None), (None, None, None)),
    ('O', (0, None, None), ('R1', None, None), (2.659, None, None)),
    ('O', (0, 1, None), ('R2', 'A2', None), (2.659, 1.907, None)),
    ('H', (0, 1, 2), ('R3', 'A3', 'D3'), (2.068, 1.933, 4.14)),
    ('H', (0, 1, 2), ('R4', 'A4', 'D4'), (2.065, 1.894, 2.06)),
    ('H', (1, 0, 2), ('R5', 'A5', 'D5'), (1.831, 1.867, 1.44)),
    ('H', (2, 0, 1), ('R6', 'A6', 'D6'), (1.831, 1.867, 4.84)))

CH4O2_ZMA_NO_NONES = (
    ('C', (), (), ()),
    ('O', (0,), ('R1',), (2.659,)),
    ('O', (0, 1,), ('R2', 'A2',), (2.659, 1.907,)),
    ('H', (0, 1, 2), ('R3', 'A3', 'D3'), (2.068, 1.933, 4.14)),
    ('H', (0, 1, 2), ('R4', 'A4', 'D4'), (2.065, 1.894, 2.06)),
    ('H', (1, 0, 2), ('R5', 'A5', 'D5'), (1.831, 1.867, 1.44)),
    ('H', (2, 0, 1), ('R6', 'A6', 'D6'), (1.831, 1.867, 4.84)))

C2H5OH_ZMA = (
    ('C', (None, None, None), (None, None, None),
     (None, None, None)),
    ('C', (0, None, None), ('R1', None, None),
     (2.8621866421132123, None, None)),
    ('H', (0, 1, None), ('R2', 'A2', None),
     (2.0691950317120837, 1.9320905931404335, None)),
    ('H', (0, 1, 2), ('R3', 'A3', 'D3'),
     (2.0665277363750003, 1.9353637583977303, 2.108686322109069)),
    ('H', (0, 1, 2), ('R4', 'A4', 'D4'),
     (2.069152234029259, 1.930351996269131, 4.218481783495319)),
    ('O', (1, 0, 2), ('R5', 'A5', 'D5'),
     (2.683747067528887, 1.9194991329920528, 1.0492575691901376)),
    ('H', (1, 0, 5), ('R6', 'A6', 'D6'),
     (2.067751813667005, 1.9377163905267163, 4.182292202036946)),
    ('H', (1, 0, 5), ('R7', 'A7', 'D7'),
     (2.0671092193398275, 1.928341045304867, 2.082936263972801)),
    ('H', (5, 1, 0), ('R8', 'A8', 'D8'),
     (1.8376095698733521, 1.8770195234414855, 5.238498010242486)))


CH4O2_ZMA_STR = """
C
O 1    R1
O 1    R2 2    A2
H 1    R3 2    A3 3    D3
H 1    R4 2    A4 3    D4
H 2    R5 1    A5 3    D5
H 3    R6 1    A6 2    D6

R1   =   1.407257
R2   =   1.407257
A2   = 109.287689
R3   =   1.094571
A3   = 110.790557
D3   = 237.645705
R4   =   1.093005
A4   = 108.557740
D4   = 118.240727
R5   =   0.969061
A5   = 107.000441
D5   =  82.650881
R6   =   0.969061
A6   = 107.000441
D6   = 277.348815
"""

# ZMAT Info for C#C[C@H](C)CO
C5H8O_ZMA = (
    ('C', (None, None, None), (None, None, None),
     (None, None, None)),
    ('C', (0, None, None), ('R1', None, None),
     (2.894126135733367, None, None)),
    ('H', (0, 1, None), ('R2', 'A2', None),
     (2.1002551784038714, 1.9218361502726833, None)),
    ('H', (0, 1, 2), ('R3', 'A3', 'D3'),
     (2.1008326855365818, 1.932519243247544, 4.182194537966691)),
    ('H', (0, 1, 2), ('R4', 'A4', 'D4'),
     (2.0985632786105715, 1.9267905467443245, 2.078543469899091)),
    ('C', (1, 0, 2), ('R5', 'A5', 'D5'),
     (2.7809944542976193, 1.9090367411091194, 1.0264175778482927)),
    ('C', (1, 0, 5), ('R6', 'A6', 'D6'),
     (2.905905476629344, 1.9462477957117656, 2.1246205025559037)),
    ('H', (1, 0, 5), ('R7', 'A7', 'D7'),
     (2.1005624282579265, 1.8988979609840009, 4.223022677525844)),
    ('X', (5, 1, 0), ('R8', 'A8', 'D8'),
     (1.8897261254578288, 1.5707963267948968, 4.216836292856281)),
    ('C', (5, 8, 1), ('R9', 'A9', 'D9'),
     (2.2778505841014964, 1.5732722619955628, 3.1519457859137696)),
    ('X', (9, 5, 8), ('R10', 'A10', 'D10'),
     (1.8897261254578286, 1.56832039159423, 0.0)),
    ('H', (9, 10, 5), ('R11', 'A11', 'D11'),
     (2.0003442808863467, 1.57550991099349, 3.14859478950736)),
    ('O', (6, 1, 0), ('R12', 'A12', 'D12'),
     (2.65076899334649, 1.9387190313618887, 1.0262708014428483)),
    ('H', (6, 1, 12), ('R13', 'A13', 'D13'),
     (2.1058345184525726, 1.9323237957467607, 2.129177885999989)),
    ('H', (6, 1, 12), ('R14', 'A14', 'D14'),
     (2.1010240316411886, 1.9207088798352128, 4.1894956154070275)),
    ('H', (12, 6, 1), ('R15', 'A15', 'D15'),
     (1.8758293656194, 1.8624105681328567, 1.2477273554765336)))

# HOOH ZMAs
HOOH_ZMA_C2 = (
    ('O', (None, None, None), (None, None, None),
     (None, None, None)),
    ('O', (0, None, None), ('R1', None, None),
     (2.747759350307364, None, None)),
    ('H', (0, 1, None), ('R2', 'A2', None),
     (1.8445111950193944, 1.6890047095551286, None)),
    ('H', (1, 0, 2), ('R3', 'A3', 'D3'),
     (1.8445107740814304, 1.6890068996082548, 4.025303059223184)))
HOOH_ZMA_CS = (
    ('O', (None, None, None), (None, None, None),
     (None, None, None)),
    ('O', (0, None, None), ('R1', None, None),
     (2.747759350307364, None, None)),
    ('H', (0, 1, None), ('R2', 'A2', None),
     (1.8445111950193944, 1.6890047095551286, None)),
    ('H', (1, 0, 2), ('R3', 'A3', 'D3'),
     (1.8445107740814304, 1.6890068996082548, 0.00)))


def test__from_data():
    """ test zmat.from_data
    """
    zma1 = zmat.from_data(
        symbs=zmat.symbols(CH4O2_ZMA),
        key_mat=zmat.key_matrix(CH4O2_ZMA),
        val_mat=zmat.value_matrix(CH4O2_ZMA),
        name_mat=zmat.name_matrix(CH4O2_ZMA),
    )
    assert zma1 == CH4O2_ZMA

    zma2 = zmat.from_data(
        symbs=zmat.symbols(CH4O2_ZMA_NO_NONES),
        key_mat=zmat.key_matrix(CH4O2_ZMA_NO_NONES),
        val_mat=zmat.value_matrix(CH4O2_ZMA_NO_NONES),
        name_mat=zmat.name_matrix(CH4O2_ZMA_NO_NONES),
    )
    assert zma2 == CH4O2_ZMA

    zma1 = list(map(list, zma1))
    zma2 = list(map(list, zma2))

    assert zmat.is_valid(zma1)
    assert zmat.is_valid(zma2)

    zma1[0] += [None]
    zma2[0][1] = zma2[0][1] + (None,)

    assert not zmat.is_valid(zma1)
    assert not zmat.is_valid(zma2)


def test__add_atom():
    """ test zmat.add_atom

    output below should look like this:
        C
        O  1    R2
        C  2    R3  1    A3
        H  3    R4  2    A4  1    D4
        H  3    R5  2    A5  1    D5
        H  3    R6  2    A6  1    D6

        R2   =   1.500000
        R3   =   1.500000
        R4   =   1.500000
        R5   =   1.500000
        R6   =   1.500000
        A3   = 120.000000
        A4   = 120.000000
        A5   = 120.000000
        A6   = 120.000000
        D4   =   0.000000
        D5   = 109.470000
        D6   =-109.470000
    """
    zma = ()
    zma = zmat.add_atom(zma, 'C', (), ())
    zma = zmat.add_atom(zma, 'O', (0,), (1.5,))
    zma = zmat.add_atom(zma, 'C', (1, 0), (1.5, 120.))
    zma = zmat.add_atom(zma, 'H', (2, 1, 0), (1.5, 120., 0.))
    zma = zmat.add_atom(zma, 'H', (2, 1, 0), (1.5, 120., +109.47))
    zma = zmat.add_atom(zma, 'H', (2, 1, 0), (1.5, 120., -109.47))
    print(zmat.string(zma))


def test__set():
    """ test zmat.set_key_matrix
        test zmat.set_name_matrix
    """

    # Increment keys by 1 (not physical, but just for testing)
    ref_reset_zma1 = (
        ('C', (None, None, None), (None, None, None),
         (None, None, None)),
        ('C', (1, None, None), ('R1', None, None),
         (2.894126135733367, None, None)),
        ('H', (1, 2, None), ('R2', 'A2', None),
         (2.1002551784038714, 1.9218361502726833, None)),
        ('H', (1, 2, 3), ('R3', 'A3', 'D3'),
         (2.1008326855365818, 1.932519243247544, 4.182194537966691)),
        ('H', (1, 2, 3), ('R4', 'A4', 'D4'),
         (2.0985632786105715, 1.9267905467443245, 2.078543469899091)),
        ('C', (2, 1, 3), ('R5', 'A5', 'D5'),
         (2.7809944542976193, 1.9090367411091194, 1.0264175778482927)),
        ('C', (2, 1, 6), ('R6', 'A6', 'D6'),
         (2.905905476629344, 1.9462477957117656, 2.1246205025559037)),
        ('H', (2, 1, 6), ('R7', 'A7', 'D7'),
         (2.1005624282579265, 1.8988979609840009, 4.223022677525844)),
        ('X', (6, 2, 1), ('R8', 'A8', 'D8'),
         (1.8897261254578288, 1.5707963267948968, 4.216836292856281)),
        ('C', (6, 9, 2), ('R9', 'A9', 'D9'),
         (2.2778505841014964, 1.5732722619955628, 3.1519457859137696)),
        ('X', (10, 6, 9), ('R10', 'A10', 'D10'),
         (1.8897261254578286, 1.56832039159423, 0.0)),
        ('H', (10, 11, 6), ('R11', 'A11', 'D11'),
         (2.0003442808863467, 1.57550991099349, 3.14859478950736)),
        ('O', (7, 2, 1), ('R12', 'A12', 'D12'),
         (2.65076899334649, 1.9387190313618887, 1.0262708014428483)),
        ('H', (7, 2, 13), ('R13', 'A13', 'D13'),
         (2.1058345184525726, 1.9323237957467607, 2.129177885999989)),
        ('H', (7, 2, 13), ('R14', 'A14', 'D14'),
         (2.1010240316411886, 1.9207088798352128, 4.1894956154070275)),
        ('H', (13, 7, 2), ('R15', 'A15', 'D15'),
         (1.8758293656194, 1.8624105681328567, 1.2477273554765336)))

    new_key_mat = (
        (None, None, None),
        (1, None, None),
        (1, 2, None),
        (1, 2, 3),
        (1, 2, 3),
        (2, 1, 3),
        (2, 1, 6),
        (2, 1, 6),
        (6, 2, 1),
        (6, 9, 2),
        (10, 6, 9),
        (10, 11, 6),
        (7, 2, 1),
        (7, 2, 13),
        (7, 2, 13),
        (13, 7, 2))

    reset_zma1 = zmat.set_key_matrix(
        C5H8O_ZMA, new_key_mat)
    assert zmat.almost_equal(ref_reset_zma1, reset_zma1)

    # Increment all the numbers on the name by 1
    ref_reset_zma2 = (
        ('C', (None, None, None), (None, None, None),
         (None, None, None)),
        ('C', (0, None, None), ('R2', None, None),
         (2.894126135733367, None, None)),
        ('H', (0, 1, None), ('R3', 'A3', None),
         (2.1002551784038714, 1.9218361502726833, None)),
        ('H', (0, 1, 2), ('R4', 'A4', 'D4'),
         (2.1008326855365818, 1.932519243247544, 4.182194537966691)),
        ('H', (0, 1, 2), ('R5', 'A5', 'D5'),
         (2.0985632786105715, 1.9267905467443245, 2.078543469899091)),
        ('C', (1, 0, 2), ('R6', 'A6', 'D6'),
         (2.7809944542976193, 1.9090367411091194, 1.0264175778482927)),
        ('C', (1, 0, 5), ('R7', 'A7', 'D7'),
         (2.905905476629344, 1.9462477957117656, 2.1246205025559037)),
        ('H', (1, 0, 5), ('R8', 'A8', 'D8'),
         (2.1005624282579265, 1.8988979609840009, 4.223022677525844)),
        ('X', (5, 1, 0), ('R9', 'A9', 'D9'),
         (1.8897261254578288, 1.5707963267948968, 4.216836292856281)),
        ('C', (5, 8, 1), ('R10', 'A10', 'D10'),
         (2.2778505841014964, 1.5732722619955628, 3.1519457859137696)),
        ('X', (9, 5, 8), ('R11', 'A11', 'D11'),
         (1.8897261254578286, 1.56832039159423, 0.0)),
        ('H', (9, 10, 5), ('R12', 'A12', 'D12'),
         (2.0003442808863467, 1.57550991099349, 3.14859478950736)),
        ('O', (6, 1, 0), ('R13', 'A13', 'D13'),
         (2.65076899334649, 1.9387190313618887, 1.0262708014428483)),
        ('H', (6, 1, 12), ('R14', 'A14', 'D14'),
         (2.1058345184525726, 1.9323237957467607, 2.129177885999989)),
        ('H', (6, 1, 12), ('R15', 'A15', 'D15'),
         (2.1010240316411886, 1.9207088798352128, 4.1894956154070275)),
        ('H', (12, 6, 1), ('R16', 'A16', 'D16'),
         (1.8758293656194, 1.8624105681328567, 1.2477273554765336)))

    new_name_mat = (
        (None, None, None),
        ('R2', None, None),
        ('R3', 'A3', None),
        ('R4', 'A4', 'D4'),
        ('R5', 'A5', 'D5'),
        ('R6', 'A6', 'D6'),
        ('R7', 'A7', 'D7'),
        ('R8', 'A8', 'D8'),
        ('R9', 'A9', 'D9'),
        ('R10', 'A10', 'D10'),
        ('R11', 'A11', 'D11'),
        ('R12', 'A12', 'D12'),
        ('R13', 'A13', 'D13'),
        ('R14', 'A14', 'D14'),
        ('R15', 'A15', 'D15'),
        ('R16', 'A16', 'D16'))

    reset_zma2 = zmat.set_name_matrix(
        C5H8O_ZMA, new_name_mat)
    assert zmat.almost_equal(ref_reset_zma2, reset_zma2)


def test__standardize():
    """ test zmat.standard_form
        test zmat.standard_name_matrix
    """

    nonstandard_zma = (
        ('C', (None, None, None), (None, None, None),
         (None, None, None)),
        ('C', (0, None, None), ('R210', None, None),
         (2.894126135733367, None, None)),
        ('H', (0, 1, None), ('R220', 'A220', None),
         (2.1002551784038714, 1.9218361502726833, None)),
        ('H', (0, 1, 2), ('R230', 'A230', 'D230'),
         (2.1008326855365818, 1.932519243247544, 4.182194537966691)),
        ('H', (0, 1, 2), ('R240', 'A240', 'D240'),
         (2.0985632786105715, 1.9267905467443245, 2.078543469899091)),
        ('C', (1, 0, 2), ('R250', 'A250', 'D250'),
         (2.7809944542976193, 1.9090367411091194, 1.0264175778482927)),
        ('C', (1, 0, 5), ('R260', 'A260', 'D260'),
         (2.905905476629344, 1.9462477957117656, 2.1246205025559037)),
        ('H', (1, 0, 5), ('R270', 'A270', 'D270'),
         (2.1005624282579265, 1.8988979609840009, 4.223022677525844)),
        ('X', (5, 1, 0), ('R280', 'A280', 'D280'),
         (1.8897261254578288, 1.5707963267948968, 4.216836292856281)),
        ('C', (5, 8, 1), ('R290', 'A290', 'D290'),
         (2.2778505841014964, 1.5732722619955628, 3.1519457859137696)),
        ('X', (9, 5, 8), ('R2100', 'A2100', 'D2100'),
         (1.8897261254578286, 1.56832039159423, 0.0)),
        ('H', (9, 10, 5), ('R2110', 'A2110', 'D2110'),
         (2.0003442808863467, 1.57550991099349, 3.14859478950736)),
        ('O', (6, 1, 0), ('R2120', 'A2120', 'D2120'),
         (2.65076899334649, 1.9387190313618887, 1.0262708014428483)),
        ('H', (6, 1, 12), ('R2130', 'A2130', 'D2130'),
         (2.1058345184525726, 1.9323237957467607, 2.129177885999989)),
        ('H', (6, 1, 12), ('R2140', 'A2140', 'D2140'),
         (2.1010240316411886, 1.9207088798352128, 4.1894956154070275)),
        ('H', (12, 6, 1), ('R2150', 'A2150', 'D2150'),
         (1.8758293656194, 1.8624105681328567, 1.2477273554765336)))

    assert zmat.almost_equal(
        C5H8O_ZMA, zmat.standard_form(nonstandard_zma))


def test_rename():
    """ test vmat.rename
    """

    ref_renamed_zma = (
        ('C', (None, None, None), (None, None, None),
         (None, None, None)),
        ('C', (0, None, None), ('R1', None, None),
         (2.894126135733367, None, None)),
        ('H', (0, 1, None), ('R2', 'A2', None),
         (2.1002551784038714, 1.9218361502726833, None)),
        ('H', (0, 1, 2), ('R3', 'A3', 'D3'),
         (2.1008326855365818, 1.932519243247544, 4.182194537966691)),
        ('H', (0, 1, 2), ('R4NEW', 'A4', 'D4'),
         (2.0985632786105715, 1.9267905467443245, 2.078543469899091)),
        ('C', (1, 0, 2), ('R5', 'A5', 'D5'),
         (2.7809944542976193, 1.9090367411091194, 1.0264175778482927)),
        ('C', (1, 0, 5), ('R6', 'A6', 'D6'),
         (2.905905476629344, 1.9462477957117656, 2.1246205025559037)),
        ('H', (1, 0, 5), ('R7', 'A7', 'D7'),
         (2.1005624282579265, 1.8988979609840009, 4.223022677525844)),
        ('X', (5, 1, 0), ('R8', 'A8', 'D8'),
         (1.8897261254578288, 1.5707963267948968, 4.216836292856281)),
        ('C', (5, 8, 1), ('R9', 'A9NEW', 'D9'),
         (2.2778505841014964, 1.5732722619955628, 3.1519457859137696)),
        ('X', (9, 5, 8), ('R10', 'A10', 'D10'),
         (1.8897261254578286, 1.56832039159423, 0.0)),
        ('H', (9, 10, 5), ('R11', 'A11', 'D11'),
         (2.0003442808863467, 1.57550991099349, 3.14859478950736)),
        ('O', (6, 1, 0), ('R12', 'A12', 'D12'),
         (2.65076899334649, 1.9387190313618887, 1.0262708014428483)),
        ('H', (6, 1, 12), ('R13', 'A13', 'D13NEW'),
         (2.1058345184525726, 1.9323237957467607, 2.129177885999989)),
        ('H', (6, 1, 12), ('R14', 'A14', 'D14'),
         (2.1010240316411886, 1.9207088798352128, 4.1894956154070275)),
        ('H', (12, 6, 1), ('R15', 'A15', 'D15'),
         (1.8758293656194, 1.8624105681328567, 1.2477273554765336)))

    renamed_zma = zmat.rename(
        C5H8O_ZMA, {'R4': 'R4NEW', 'A9': 'A9NEW', 'D13': 'D13NEW'})
    assert zmat.almost_equal(ref_renamed_zma, renamed_zma)


def test__remove_atom():
    """ test vmat.remove_atom
    """

    # Remove a terminal hydrogen
    new_vma = zmat.remove_atom(C5H8O_ZMA, 13)
    print('NEW VMA', new_vma)

    # remove O atom from OH group; should break
    with pytest.raises(ValueError):
        new_vma = zmat.remove_atom(C5H8O_ZMA, 12)


def test__equality():
    """ test zmat.almost_equal
    """

    assert not zmat.almost_equal(HOOH_ZMA_C2, HOOH_ZMA_CS)
    assert zmat.almost_equal(HOOH_ZMA_C2, HOOH_ZMA_CS, just_dist=True)


def test__string():
    """ test zmat.string
    """
    zma = zmat.from_string(zmat.string(CH4O2_ZMA))
    assert zmat.almost_equal(zma, CH4O2_ZMA)


def test__coord_values():
    """ test zmat.distance
        test zmat.central_angle
        test zmat.dihedral_angle
    """

    dist1 = zmat.distance(CH4O2_ZMA, 1, 6, angstrom=False)
    dist2 = zmat.distance(CH4O2_ZMA, 1, 6, angstrom=True)
    assert numpy.isclose(dist1, 4.981884412572709)
    assert numpy.isclose(dist2, 2.636299697325578)

    cangle1 = zmat.central_angle(CH4O2_ZMA, 1, 0, 2, degree=False)
    cangle2 = zmat.central_angle(CH4O2_ZMA, 1, 0, 2, degree=True)
    assert numpy.isclose(cangle1, 1.907)
    assert numpy.isclose(cangle2, 109.26305153144799)

    dangle1 = zmat.dihedral_angle(CH4O2_ZMA, 1, 0, 2, 6, degree=False)
    dangle2 = zmat.dihedral_angle(CH4O2_ZMA, 1, 0, 2, 6, degree=True)
    assert numpy.isclose(dangle1, 4.84)
    assert numpy.isclose(dangle2, 277.31157284331846)


def __dihedral():
    """ test zmat.dihedral_axis_name
    """

    assert zmat.dihedral_axis_name(C2H5OH_ZMA, (0, 1)) == 'D3'
    assert zmat.dihedral_axis_name(C2H5OH_ZMA, (5, 1)) == 'D8'
    # wrong?


def __linear_atom_keys():
    """ test zmat.linear_atom_keys
    """
    assert zmat.linear_atom_keys(C5H8O_ZMA) == (5, 9)
    assert zmat.linear_atom_keys(C5H8O_ZMA, geom_indexing=True) == (5, 8)
    # wrong?


def test__shift():
    """ test zmat.shift_up
    """
    assert zmat.shift_up(C5H8O_ZMA, (3, 9, 12)) == (3, 10, 14)


def test__extra():
    """ test zmat.bond_key_from_idxs
    """

    assert zmat.bond_key_from_idxs(CH4O2_ZMA, [0, 1]) == 'R1'
    assert zmat.bond_key_from_idxs(CH4O2_ZMA, [6, 2]) == 'R6'

    tors_names = (('D5',), ('D8',))
    tors_names2 = ('D5', 'D8')
    assert zmat.set_constraint_names(C2H5OH_ZMA, tors_names, '1dhrf') == (
        'D5', 'D8')
    assert zmat.set_constraint_names(C2H5OH_ZMA, tors_names, '1dhrfa') == (
        'R1', 'R2', 'A2', 'R3', 'A3', 'D3', 'R4', 'A4', 'D4', 'R5', 'A5',
        'D5', 'R6', 'A6', 'D6', 'R7', 'A7', 'D7', 'R8', 'A8', 'D8')

    ref_range = (0, 6.283185307179586)
    tors_names2 = ('D5', 'D8')
    ranges = zmat.torsional_sampling_ranges(tors_names2)
    assert (numpy.allclose(ref_range, ranges[0]) and
            numpy.allclose(ref_range, ranges[1]))


if __name__ == '__main__':
    test__extra()
