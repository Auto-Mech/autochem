"""
 Various utility functions
"""

import automol


def graph_with_keys(zma, zrxn=None):
    """ Generate the graph
    """

    if zrxn is None:
        # geo, gdummy_key_dct = automol.convert.zmat.geometry(zma)
        # gra = automol.geom.graph(geo)
        # lin_keys = sorted(gdummy_key_dct.keys())
        gra = automol.zmat.graph(zma, stereo=True, dummy=True)
        lin_keys = sorted(
            automol.graph.dummy_atoms_neighbor_atom_key(gra).values())
    else:
        gra = zrxn.forward_ts_graph
        lin_keys = sorted(
            automol.graph.dummy_atoms_neighbor_atom_key(gra).values())

    return gra, lin_keys


def sort_tors_names(tors_names):
    """ sort torsional names so that Dn where n is ascending order
    """
    tors_names = list(tors_names)
    tors_names.sort(key=lambda x: int(x.split('D')[1]))
    return tors_names


(('C', (None, None, None), (None, None, None), (None, None, None)), ('C', (0, None, None), ('R1', None, None), (2.4655256758848285, None, None)), ('H', (0, 1, None), ('R2', 'A2', None), (2.054321270985205, 2.117868035503267, None)), ('H', (0, 1, 2), ('R3', 'A3', 'D3'), (2.054321270985205, 2.1177825143699196, 3.1523438817820786)), ('X', (1, 0, 2), ('R4', 'A4', 'D4'), (1.0000430655922827, 1.5707963267948966, 0.0)), ('C', (1, 4, 0), ('R5', 'A5', 'D5'), (2.4689271829106523, 1.5709080278670242, 3.1460362618653708)), ('C', (5, 1, 4), ('R6', 'A6', 'D6'), (2.8667145323195253, 2.18227243023111, 1.5656249162212375)), ('H', (5, 1, 6), ('R7', 'A7', 'D7'), (2.059423531523941, 2.0713707189008863, 3.1415350577244774)), ('C', (6, 5, 1), ('R8', 'A8', 'D8'), (2.8517856959284087, 1.9857064685545005, -0.00017802358370342162)), ('H', (6, 5, 8), ('R9', 'A9', 'D9'), (2.0747303131401496, 1.8919822877224053, 4.141189840096749)), ('H', (6, 5, 8), ('R10', 'A10', 'D10'), (2.0747303131401496, 1.8919334185033492, 2.141932635229765)), ('C', (8, 6, 5), ('R11', 'A11', 'D11'), (2.6371128080763993, 2.105662948044071, 1.5545717460683575)), ('C', (8, 6, 11), ('R12', 'A12', 'D12'), (2.6371128080763993, 2.1057432331896626, 3.1775638894733964)), ('C', (11, 8, 6), ('R13', 'A13', 'D13'), (2.629364930962022, 2.108057539777807, 3.1722493619010734)), ('H', (11, 8, 13), ('R14', 'A14', 'D14'), (2.055077161435388, 2.0830190463286966, 3.1387704561893184)), ('C', (12, 8, 6), ('R15', 'A15', 'D15'), (2.629364930962022, 2.108019142534263, 3.1110284477288683)), ('H', (12, 8, 15), ('R16', 'A16', 'D16'), (2.055077161435388, 2.08305744357224, 3.1442211194432965)), ('C', (13, 11, 8), ('R17', 'A17', 'D17'), (2.6306877392498422, 2.095679664722663, 6.2849009658342965)), ('H', (13, 11, 17), ('R18', 'A18', 'D18'), (2.052620517472293, 2.0913512481777174, 3.143425249304387)), ('H', (15, 12, 8), ('R19', 'A19', 'D19'), (2.052620517472293, 2.0913250682389375, 3.138023455269465)), ('H', (17, 13, 11), ('R20', 'A20', 'D20'), (2.0522425722472013, 2.0977548612032844, 3.144273479320857)))
