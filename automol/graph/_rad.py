""" radical library
"""

from automol.graph._graph import unsaturated_atom_keys
from automol.graph._graph import add_atom_explicit_hydrogen_keys
from automol.graph._graph import remove_atoms
from automol.graph._graph import atoms_neighbor_atom_keys
from automol.graph._graph import full_isomorphism
from automol.graph._graph_base import atom_symbols


def isomorphic_radical_graphs(gra):
    """ Generate a set of graphs that are isomorphic to a graph
        of a radical species
    """

    iso_gras = tuple()
    for _gra, iso in _radical_graph_isomorphisms(gra):
        if iso:
            iso_gras += (_gra,)

    return iso_gras


def nonisomorphic_radical_graphs(gra):
    """ Generate a set of graphs that are NOT isomorphic to a graph
        of a radical species
    """

    noniso_gras = tuple()
    for _gra, iso in _radical_graph_isomorphisms(gra):
        if not iso:
            noniso_gras += (_gra,)

    return noniso_gras


def _radical_graph_isomorphisms(gra):
    """ Generate a set of graphs where the radical has been migrated to a
        new atom and then calculate the isomorphism between the input
        graph and all of the new graphs generated by moving the radical
    """

    # Determine useful keys
    symbols = atom_symbols(gra)
    unsat_keys = unsaturated_atom_keys(gra)
    unsat_key = next(iter(unsat_keys))
    h_atm_key = max(symbols.keys()) + 1

    new_gras, isomorphisms = [], []
    for aidx, symbol in enumerate(symbols.values()):

        # Loop over saturated (non-radical) heavy atoms
        if symbol != 'H' and aidx != unsat_key:

            # Add hydrogen atom to radical atom
            new_graph = add_atom_explicit_hydrogen_keys(
                gra, {unsat_key: [h_atm_key]})

            # Remove hydrogen from saturated atom
            neighbors = atoms_neighbor_atom_keys(new_graph)
            for neigh in neighbors[aidx]:
                if symbols[neigh] == 'H':
                    aneighbor = neigh
                    break
            new_graph = remove_atoms(new_graph, [aneighbor])

            # Build lists to return
            new_gras.append(new_graph)
            isomorphisms.append(full_isomorphism(gra, new_graph))

    return tuple(zip(new_gras, isomorphisms))
